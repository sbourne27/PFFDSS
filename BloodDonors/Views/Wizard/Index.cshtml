@using System.Web.Mvc.Ajax

@model BloodDonors.Models.Assessment

@{
    ViewBag.Title = "Wizard";
}


<style>
    div.scroll {
        width: 100%;
        overflow-y: scroll;
        height: 250px;
    }

    /*table {
        border-collapse: collapse;
        border-radius: 5px;
    }

    th {
        font-family: Times;
        color: black;
        font-size: 11pt;
        border-bottom: 1px solid #fff;
        border-right: 1px solid #fff;
        border-left: 1px solid #fff;
        color: #fff;
        padding: 1px 1px 0;
        background-color: #006BB2;
    }

    td {
        font-family: Times;
        color: black;
        font-size: 11pt;
        align: 'right';
        border-bottom: 1px solid #fff;
        border-right: 1px solid #fff;
        color: black;
        padding: 1px 1px 0;
    }

    tr {
        background-color: #F8FBFF;
    }*/
</style>


<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

<script src="~/Scripts/jquery-1.6.2.js"></script>
<script src="~/Scripts/jquery.unobtrusive-ajax.js"></script>


@*<script src="../../Scripts/scenejs.js"></script>*@

<script src="http://scenejs.org/api/latest/scenejs.js"></script>

<script type="text/javascript" src="~/Scripts/canvasjs.min.js"></script>

@*<script src="@Url.Content("http://scenejs.org/api/latest/scenejs.js")" type="text/javascript"></script>*@



@*Wait Screen*@
<div id="loading"></div>



<div id="MainTool" style="height:100%; width:100%">



    <table border="0" id="AssessmentTable" style="height:95%; width:100%; background-color:white; padding-top:0px;">

        <tr valign="top" style="background-color:white; height:80%;">

            <td id="AssessmentWizardCell" valign="top">

                <div id="AssessmentWizardDiv">

                    <input type="hidden" name="CurrentTransectName" id="CurrentTransectName" value="">

                    <input type="hidden" name="TransectBlob" id="TransectBlob" value="">
                    <input type="hidden" name="TransectProps" id="TransectProps" value="">
                    <input type="hidden" name="TransectElevs" id="TransectElevs" value="">

                    <input type="hidden" name="BHLocationData" id="BHLocationData" value="">
                    <input type="hidden" name="BHSampleData" id="BHSampleData" value="">

                    <input type="hidden" name="ResistivityVisible" id="ResistivityVisible" value="0">
                    <input type="hidden" name="BoreholeChartsVisible" id="BoreholeChartsVisible" value="0">

                    <input type="hidden" name="CurrentStationStartVal" id="CurrentStationStartVal" value="0">
                    <input type="hidden" name="CurrentStationEndVal" id="CurrentStationEndVal" value="0">

                    <input type="hidden" name="ProposedBoreholes" id="ProposedBoreholes" value="">

                    <input type="hidden" name="KnownStableAreaPoints" id="KnownStableAreaPoints" value="">
                    <input type="hidden" name="KnownThawSettlementPoints" id="KnownThawSettlementPoints" value="">

                    <input type="hidden" name="ProConditions" id="ProList" value="">
                    <input type="hidden" name="ConConditions" id="ConList" value="">

                    <input type="hidden" name="ConditionList" id="ConditionList" value="">

                    <input type="hidden" name="BuildingSiteCoordinates" id="BuildingSiteCoordinates" value="">

                    <input type="hidden" name="FoundationAssessmentResult" id="FoundationAssessmentResult" value="">

                    <input type="hidden" name="CurrentMaxStation" id="CurrentMaxStation" value="250">
                    <input type="hidden" name="CurrentMinStation" id="CurrentMinStation" value="0">
                    <input type="hidden" name="CurrentMaxElev" id="CurrentMaxElev" value="100">
                    <input type="hidden" name="CurrentMinElev" id="CurrentMinElev" value="200">

                    <input type="hidden" name="CurrentResistivityStartStation" id="CurrentResistivityStartStation" value="-99">
                    <input type="hidden" name="CurrentResistivityEndStation" id="CurrentResistivityEndStation" value="-99">

                    <input type="hidden" name="CurrentBoreholeEndStation" id="CurrentBoreholeEndStation" value="-99">
                    <input type="hidden" name="CurrentBoreholeStartStation" id="CurrentBoreholeStartStation" value="-99">
                    <input type="hidden" name="CurrentBoreholeMaxElev" id="CurrentBoreholeMaxElev" value="-99">
                    <input type="hidden" name="CurrentBoreholeMinElev" id="CurrentBoreholeMinElev" value="-99">


                    <div id="result">

                        @using (Html.BeginForm("Assessment"))
                        {
                            @Html.AntiForgeryToken()
                            @Html.ValidationSummary(true)

                            <style type="text/css">
                                .wizard-step {
                                    display: none;
                                }
                            </style>


                            <fieldset>

                                @*<input type="hidden" name="CurrentStep" id="CurrentStep" value="WS0">*@

                                @Html.HiddenFor(x => x.CurrentStep)

                                <input type="hidden" name="CurrentDrawType" id="CurrentDrawType" value="None">

                                @Html.HiddenFor(x => x.ShapeCoordinates)

                                @Html.HiddenFor(x => x.SiteLatitude)
                                @Html.HiddenFor(x => x.SiteLongitude)
                                @Html.HiddenFor(x => x.SiteAngle)

                                @*<input type="hidden" name="ShapeCoordinates" id="ShapeCoordinates" value="None">*@
                                <input type="hidden" name="TerrainDescription" id="TerrainDescription" value="None">

                                <div class="wizard-step" name="WS" id="WS0">
                                    <h3> Please provide a name for your assessment.</h3>
                                    <p>This name will be stored in the DSS, and can be reloaded with all your saved settings. You can modify this assessment and save it under a different name, as well.</p>
                                    @*<div class="editor-label">
                                            @Html.LabelFor(model => model.AssessmentName)
                                        </div>*@
                                    <div class="editor-field">
                                        @Html.TextBoxFor(model => model.AssessmentName, new { size = 600 })
                                        @Html.ValidationMessageFor(model => model.AssessmentName)
                                    </div>
                                </div>

                                @Html.Hidden("AssessmentID")
                                @Html.Hidden("UserID")
                                @Html.Hidden("LastModifiedDate")
                                @Html.Hidden("CreatedDate")
                                @Html.Hidden("CurrentModel")


                                <div class="wizard-step" name="WS" id="WS1">
                                    <h3> What type of structure are you planning to build?</h3>
                                    <p>The list below includes many structure types specified in the International Building Code database.   If you select one, the DSS will use the default length, width, number of stories, whether the structure is elevated or on grade, whether the structure is heated, and the acceptable risk level. If you don't find the structure type you want, specify either Light or Heavy structure and you will be asked to answer multiple questions about the structure to provide the same level of detail.  Note that if you select an IBC structure type and move to the next screen, you can then use the back button to adjust the values of the structure parameters.</p>
                                    @*<div class="editor-label">
                                            @Html.LabelFor(model => model.StructureType)
                                        </div>*@
                                    <div class="editor-field">
                                        @Html.EditorFor(model => model.StructureType)
                                        @Html.ValidationMessageFor(model => model.StructureType)
                                    </div>
                                </div>
                                <div class="wizard-step" name="WS" id="WS1_1">
                                    <h3> What will you use the light structure for?</h3>
                                    @*<div class="editor-label">
                                            @Html.LabelFor(model => model.LightStructureUse)
                                        </div>*@
                                    <div class="editor-field">
                                        @Html.EditorFor(model => model.LightStructureUse)
                                        @Html.ValidationMessageFor(model => model.LightStructureUse)
                                    </div>
                                </div>
                                <div class="wizard-step" name="WS" id="WS1_2">
                                    <h3> What will you use the heavy structure for?</h3>
                                    @*<div class="editor-label">
                                            @Html.LabelFor(model => model.HeavyStructureUse)
                                        </div>*@
                                    <div class="editor-field">
                                        @Html.EditorFor(model => model.HeavyStructureUse)
                                        @Html.ValidationMessageFor(model => model.HeavyStructureUse)
                                    </div>
                                </div>
                                <div class="wizard-step" name="WS" id="WS1_3">
                                    <h3> What will you use the linear structure for?</h3>
                                    @*<div class="editor-label">
                                            @Html.LabelFor(model => model.LinearStructureUse)
                                        </div>*@
                                    <div class="editor-field">
                                        @Html.EditorFor(model => model.LinearStructureUse)
                                        @Html.ValidationMessageFor(model => model.LinearStructureUse)
                                    </div>
                                </div>


                                <div class="wizard-step" name="WS" id="WS1_5" style="margin: 20px;">

                                    <h3>What is the general area in which you are looking to place your building site?</h3>
                                    <h3>Please sketch your assessment area on the map.</h3>
                                    <p>The “assessment area” refers to the entire region where you might construct a building. It may be quite large; far larger than the structure you plan to build. The DSS will provide a general evaluation of assessment area, and help you select optimal building sites or routes within the assessment area. </p>
                                    <p>The “building site” refers to the actual area that the building or road will occupy. Basically, it is all the region within the building walls or the entire road embankment.</p>
                                    <p>In this step, you will use your mouse to sketch in the boundary or perimeter of the assessment area. If you already know the location of your building site, zoom in and sketch the boundary of the building site. (Note that the last point you click should be the same as the first point)</p>

                                    <div class="button">
                                        <input type="button" value="Draw Assessment Area" name="DrawAssessmentArea" id="DrawAssessmentArea" />
                                    </div>
                                    

                                    @*<div class="editor-label">
                                            @Html.LabelFor(model => model.AssessmentArea)
                                        </div>
                                        <div class="editor-field">
                                            @Html.EditorFor(model => model.AssessmentArea)
                                            @Html.ValidationMessageFor(model => model.AssessmentArea)
                                        </div>*@
                                    <br />

                                    <div id="AssessmentAreaSummary">Sketch Area on Map for a Report...</div>

                                </div>


                                <div class="wizard-step" name="WS" id="WS2">
                                    <h3>What is the approximate length of the structure? [meters]</h3>
                                    <p>Here, you will input the maximum length and width of the structure you intend to build. The structure should be idealized as a simple geometric shape such as a rectangle or square. </p>
                                    @*<div class="editor-label">
                                            @Html.LabelFor(model => model.StructureLength)
                                        </div>*@
                                    <div class="editor-field">
                                        @Html.EditorFor(model => model.StructureLength, new { size = 600 })
                                        @Html.ValidationMessageFor(model => model.StructureLength)
                                    </div>
                                    <h3>What is the approximate width of the structure? [meters]</h3>
                                    @*<div class="editor-label">
                                            @Html.LabelFor(model => model.StructureWidth)
                                        </div>*@
                                    <div class="editor-field">
                                        @Html.EditorFor(model => model.StructureWidth, new { size = 600 })
                                        @Html.ValidationMessageFor(model => model.StructureWidth)
                                    </div>
                                </div>

                                <div class="wizard-step" name="WS" id="WS2_1">
                                    <h3>What is the approximate length of the structure? [meters]</h3>
                                    @*<div class="editor-label">
                                            @Html.LabelFor(model => model.StructureLength)
                                        </div>*@
                                    <div class="editor-field">
                                        @Html.EditorFor(model => model.StructureLength, new { size = 600 })
                                        @Html.ValidationMessageFor(model => model.StructureLength)
                                    </div>
                                </div>

                                <div class="wizard-step" name="WS" id="WS3">
                                    <h3>What is the needed lifespan in years?</h3>
                                    @*<div class="editor-label">
                                            @Html.LabelFor(model => model.LifeSpan)
                                        </div>*@
                                    <div class="editor-field">
                                        @Html.EditorFor(model => model.LifeSpan, new { size = 600 })
                                        @Html.ValidationMessageFor(model => model.LifeSpan)
                                    </div>
                                </div>

                                <div class="wizard-step" name="WS" id="WS4">
                                    <h3>How many stories will the structure be?</h3>
                                    @*<div class="editor-label">
                                            @Html.LabelFor(model => model.Stories)
                                        </div>*@
                                    <div class="editor-field">
                                        @Html.EditorFor(model => model.Stories, new { size = 600 })
                                        @Html.ValidationMessageFor(model => model.Stories)
                                    </div>
                                </div>

                                <div class="wizard-step" name="WS" id="WS5">
                                    <h3>Will the structure's foundation be elevated or at grade?</h3>
                                    <p>The term “at grade” means that the foundation will sit directly on the ground surface with only minor modification of the terrain to smooth it out. By contrast, an “elevated” foundation is one that is built above the ground surface. For example, the house in the photo below is sitting on pilings.</p>
                                    <div style="display:block;">
                                        <img src="~/Images/House_on_piles.jpg" alt="HouseOnPiles" id="QuestionnaireImage">
                                    </div>
                                    @*<div class="editor-label">
                                            @Html.LabelFor(model => model.FoundationElevation)
                                        </div>*@
                                    <div class="editor-field">
                                        @Html.EditorFor(model => model.FoundationElevation)
                                        @Html.ValidationMessageFor(model => model.FoundationElevation)
                                    </div>
                                </div>

                                <div class="wizard-step" name="WS" id="WS6">
                                    <h3>What is the requirment for life saftey?</h3>
                                    @*<div class="editor-label">
                                            @Html.LabelFor(model => model.LifeSafetyRequirement)
                                        </div>*@
                                    <div class="editor-field">
                                        @Html.EditorFor(model => model.LifeSafetyRequirement)
                                        @Html.ValidationMessageFor(model => model.LifeSafetyRequirement)
                                    </div>
                                </div>

                                <div class="wizard-step" name="WS" id="WS7">
                                    <h3>What is the acceptable level of risk of foundation failure?</h3>
                                    @*<div class="editor-label">
                                            @Html.LabelFor(model => model.AcceptableFoundationFailureRiskLevel)
                                        </div>*@
                                    <p>This refers to the risk of structural failure. For example, a nuclear plant would have a low acceptable risk level, as would a hospital. A high acceptable risk level might be a storage shed or warehouse.</p>
                                    <br />
                                    <div class="editor-field">
                                        @Html.EditorFor(model => model.AcceptableFoundationFailureRiskLevel)
                                        @Html.ValidationMessageFor(model => model.AcceptableFoundationFailureRiskLevel)
                                    </div>
                                </div>

                                <div class="wizard-step" name="WS" id="WS8">
                                    <h3>Will the structure be heated?</h3>
                                    @*<div class="editor-label">
                                            @Html.LabelFor(model => model.StructureHeated)
                                        </div>*@
                                    <div class="editor-field">
                                        @Html.EditorFor(model => model.StructureHeated)
                                        @Html.ValidationMessageFor(model => model.StructureHeated)
                                    </div>
                                </div>

                                <div class="wizard-step" name="WS" id="WS9">
                                    <h3>Have you observed evidence of ice-wedge polygons or troughs at the site? They will likely be covered by vegetation and difficult to spot.  The troughs develop above ice wedges, as shown in the photo, and are sometimes wet or ponded?</h3>
                                    <div style="display:block;">
                                        <img src="~/Images/IceWedge4.jpg" alt="ThermoKarst" id="QuestionnaireImage">
                                        <img src="~/Images/IceWedge2.jpg" alt="ThermoKarst" id="QuestionnaireImage">
                                    </div>
                                    @*<div class="editor-label">
                                            @Html.LabelFor(model => model.ObservedIceWedges)
                                        </div>*@
                                    <div class="editor-field">
                                        @Html.EditorFor(model => model.ObservedIceWedges)
                                        @Html.ValidationMessageFor(model => model.ObservedIceWedges)
                                    </div>
                                </div>

                                <div class="wizard-step" name="WS" id="WS10">
                                    <h3>How would you describe the topography?</h3>
                                    <p>Flat or nearly level (0-2% slope)
                                    <p>Moderately sloping (3-10%)
                                    <p>Steeply sloping (>10%)

                                    <p>
                                        The slope, or grade, is used to express how flat or steep the land is. It is often used to estimate the erosion potential of a site. The slope is calculated as the number of feet (or meters) the land surfaces rises or falls over a distance of 100 feet (or meters).
                                        <br />
                                        <img src="~/Images/Slope.jpg" alt="Slope" id="QuestionnaireImage">

                                        @*<div class="editor-label">
                                                @Html.LabelFor(model => model.TopographyEstimate)
                                            </div>*@
                                        <div class="editor-field">
                                            @Html.EditorFor(model => model.TopographyEstimate)
                                            @Html.ValidationMessageFor(model => model.TopographyEstimate)
                                        </div>
                                </div>

                                <div class="wizard-step" name="WS" id="WS11">
                                    <h3>Is there thermokarst on the site?  Thermokarst occurs when ice-rich permafrost thaws, and the ground surface  non-uniformly sinks or subsides.  This creates a land surface characterized by a very irregular surface of marshy hollows, ponds, small hummocks and tilted trees (“drunken forest”). See photos below for examples.</h3>
                                    <img src="~/Images/ThermoKarst2.jpg" alt="ThermoKarst" id="QuestionnaireImage">
                                    <img src="~/Images/ThermoKarst3.jpg" alt="ThermoKarst" id="QuestionnaireImage">
                                    <br />
                                    @*<div class="editor-label">
                                            @Html.LabelFor(model => model.ThermoKarstPresent)
                                        </div>*@
                                    <div class="editor-field">
                                        @Html.EditorFor(model => model.ThermoKarstPresent)
                                        @Html.ValidationMessageFor(model => model.ThermoKarstPresent)
                                    </div>
                                </div>

                                <div class="wizard-step" name="WS" id="WS12">
                                    <h3>How would you describe the vegetation at the building site?</h3>
                                    <img src="~/Images/Spruce1.jpg" alt="Spruce" id="QuestionnaireImage">
                                    <img src="~/Images/Spruce2.jpg" alt="Spruce" id="QuestionnaireImage">
                                    <img src="~/Images/Spruce3.jpg" alt="Spruce" id="QuestionnaireImage">

                                    @*<div class="editor-label">
                                            @Html.LabelFor(model => model.VegetationType)
                                        </div>*@
                                    <div class="editor-field">
                                        @Html.EditorFor(model => model.VegetationType)
                                        @Html.ValidationMessageFor(model => model.VegetationType)
                                    </div>
                                </div>

                                <div class="wizard-step" name="WS" id="WS13">
                                    <h3>Did you observe any black spruce?</h3>
                                    <img src="~/Images/BlackSpruce2.jpg" alt="BlackSpruce" id="QuestionnaireImage">
                                    <img src="~/Images/BlackSpruce3.jpg" alt="BlackSpruce" id="QuestionnaireImage">
                                    <br />
                                    @*<div class="editor-label">
                                            @Html.LabelFor(model => model.BlackSprucePresent)
                                        </div>*@
                                    <div class="editor-field">
                                        @Html.EditorFor(model => model.BlackSprucePresent)
                                        @Html.ValidationMessageFor(model => model.BlackSprucePresent)
                                    </div>
                                </div>

                                <div class="wizard-step" name="WS" id="WS14">
                                    <h3>Did you observe any drunken forest nearby or at the building site?  This occurs when trees tilt due to thaw of the underlying permafrost.</h3>
                                    <div>
                                        <img src="~/Images/DrunkenForest2.jpg" alt="DrunkenForest" id="QuestionnaireImage">
                                        <img src="~/Images/DrunkenForest3.jpg" alt="DrunkenForest" id="QuestionnaireImage">

                                    </div>

                                    <br />
                                    @*<div class="editor-label">
                                            @Html.LabelFor(model => model.DrunkenForestPresent)
                                        </div>*@
                                    <div class="editor-field">
                                        @Html.EditorFor(model => model.DrunkenForestPresent)
                                        @Html.ValidationMessageFor(model => model.DrunkenForestPresent)
                                    </div>
                                </div>

                                <div class="wizard-step" name="WS" id="WS15">
                                    <h3>Did you observe any marshes or standing ponded water at the building site?</h3>
                                    <img src="~/Images/Marsh1.jpg" alt="Water" id="QuestionnaireImage">
                                    <img src="~/Images/Marsh2.jpg" alt="Water" id="QuestionnaireImage">
                                    @*<div class="editor-label">
                                            @Html.LabelFor(model => model.MarshesStandingWaterPresent)
                                        </div>*@
                                    <div class="editor-field">
                                        @Html.EditorFor(model => model.MarshesStandingWaterPresent)
                                        @Html.ValidationMessageFor(model => model.MarshesStandingWaterPresent)
                                    </div>
                                </div>

                                <div class="wizard-step" name="WS" id="WS16">
                                    <h3>Did you observe any streams?</h3>
                                    <img src="~/Images/Stream.jpg" alt="Water" id="QuestionnaireImage">
                                    @*<div class="editor-label">
                                            @Html.LabelFor(model => model.StreamsPresent)
                                        </div>*@
                                    <div class="editor-field">
                                        @Html.EditorFor(model => model.StreamsPresent)
                                        @Html.ValidationMessageFor(model => model.StreamsPresent)
                                    </div>
                                </div>

                                <div class="wizard-step" name="WS" id="WS17">
                                    <h3>Are there any existing structures on the site?</h3>
                                    @*<div class="editor-label">
                                            @Html.LabelFor(model => model.ExistingStructuresPresent)
                                        </div>*@
                                    <div class="editor-field">
                                        @Html.EditorFor(model => model.ExistingStructuresPresent)
                                        @Html.ValidationMessageFor(model => model.ExistingStructuresPresent)
                                    </div>
                                </div>

                                <div class="wizard-step" name="WS" id="WS18">
                                    <h3>What kind of existing structures?</h3>
                                    @*<div class="editor-label">sketch new transect on map
                                            @Html.LabelFor(model => model.ExistingStructureType)
                                        </div>*@
                                    <div class="editor-field">
                                        @Html.EditorFor(model => model.ExistingStructureType)
                                        @Html.ValidationMessageFor(model => model.ExistingStructureType)
                                    </div>
                                </div>

                                <div class="wizard-step" name="WS" id="WS19">
                                    <h3>Are the existing structures heated?</h3>
                                    @*<div class="editor-label">
                                            @Html.LabelFor(model => model.ExistingStructuresHeated)
                                        </div>*@
                                    <div class="editor-field">
                                        @Html.EditorFor(model => model.ExistingStructuresHeated)
                                        @Html.ValidationMessageFor(model => model.ExistingStructuresHeated)
                                    </div>
                                </div>

                                <div class="wizard-step" name="WS" id="WS20">
                                    <h3>What is the condition of the foundation of the existing structures?</h3>
                                    @*<div class="editor-label">
                                            @Html.LabelFor(model => model.ExistingStructuresFoundationCondition)
                                        </div>*@
                                    <div class="editor-field">
                                        @Html.EditorFor(model => model.ExistingStructuresFoundationCondition)
                                        @Html.ValidationMessageFor(model => model.ExistingStructuresFoundationCondition)
                                    </div>
                                </div>




                                <div class="wizard-step" name="WS" id="WS21">
                                    <h3>Moving to field assessment.</h3>
                                    <br />
                                    <div>The desktop assessment brings together data and expertise on permafrost foundation design to give you an idea of the level of difficulty you'll find in building within your intended area.</div>
                                    <br />
                                    <div>The next step is field assessment, where you collect data in the field to much better understand your assessment area.  A key part of field assessment is collecting borehole and electromagnetic scans of your proposed area, so that you understand what's going on under the surface.</div>
                                    <br />
                                    <div>To get started, click NEXT.</div>

                                </div>

                                <div class="wizard-step" name="WS" id="WS22">
                                    <h3>Field Assessment: Plan your survey</h3>
                                    <br />
                                    <div id="FieldAssessmentIntro">The first step in a field assessment is the collection of surface and subsurface data within the assessment area.  Surface data includes the description of natural and man-made features that are impacting or are being impacted by processes in the area. Subsurface data includes using invasive techniques (borehole drilling, test pits) and non-invasive techniques (surface geophysics; resistivity, conductivity, ground penetrating radar) to gather natural properties and spatial information on  the soils and ground ice. The locations of specific features can be noted on a site plan map, while drill locations and geophysical transects can be pre-drawn to aid the investigation, and plotted for their actual location.</div>
                                    <br />
                                    <div>PFFDSS can help you to plan out the location of your transects.   Use the tools below to define the transects.</div>
                                    <br />
                                    <div class="button"><input type="button" value="Sketch New Transect on Map" name="DrawNewTransect" id="DrawNewTransect" style="display:inline-block; width:150px; height:50px; white-space:normal;" /></div>
                                    @*<input type="button" value="Suggest Basic Transect Pattern" name="SuggestSimpleTransect" id="SuggestSimpleTransect" style="display:inline-block; width:150px; height:50px; white-space:normal;" />
                                    <input type="button" value="Suggest Grid Transect Pattern" name="SuggestGridTransect" id="SuggestGridTransect" style="display:inline-block; width:150px; height:50px; white-space:normal;" />*@

                                        <div style="height:450px; overflow:auto;">
                                            <table border="1" id="TransectTable1"></table>
                                        </div>

                                    </div>

                                <div class="wizard-step" name="WS" id="WS23">
                                    <h3>Field Assessment: Adding resistivity plots</h3>
                                    <br />
                                    <div id="FieldAssessmentIntro">Once you've done resistivity surveys, add the plots to each transect using the <b>ADD</b> buttons in the table below.  You can also plot the data using the <b>PLOT</b> buttons. </div>
                                    <br />
                                    @*<div class="button"><input type="button" value="Sketch New Transect on Map" name="DrawNewTransect" id="DrawNewTransect" style="display:inline-block; width:150px; height:50px; white-space:normal;" /></div>*@
                                    @*<input type="button" value="Suggest Basic Transect Pattern" name="SuggestSimpleTransect" id="SuggestSimpleTransect" style="display:inline-block; width:150px; height:50px; white-space:normal;" />
                                    <input type="button" value="Suggest Grid Transect Pattern" name="SuggestGridTransect" id="SuggestGridTransect" style="display:inline-block; width:150px; height:50px; white-space:normal;" />*@

                                    <div style="height:450px; overflow:auto;">
                                        <table border="1" id="TransectTable2"></table>
                                    </div>

                                </div>



                                <div class="wizard-step" name="WS" id="WS24">
                                    <h3>Field Assessment: Planning borehole locations</h3>
                                    <br />
                                    <div id="FieldAssessmentIntro">Typically, the resisitivity data should both give you a good idea of subsurface features but also raise questions about the exact location and depth of layers that can support your foundation.  You can use boreholes to help answer those questions.<br><br />Using the plot tool, you can add proposed locations for boreholes based on your resistivity plot.  Click the <b>PLOT</b> button for the transect you're interested in.  Then, <b>use the boreholes tools to add boreholes</b>.  Once you're done, print the survey plan and dig the boreholes.<br /><br />In the next step, you can upload the borehole data for further analysis.</div>
                                    @*<div style="height:450px; overflow:auto;">
                                           <table border="1" id="BoreholeTable">

                                           </table>
                                        </div>
                                        <input type="button" id="MapBH" name="MapBH" value="Map Boreholes" onclick='MapBoreholes()' />
                                        <input type="button" id="ChartBH" name="ChartBH" value="Chart Transect" onclick='ShowBoreholes()' />*@
                                    
                                    <h3>Transects</h3>
                                    <table id="TransectTable3" style="height: 200px;"></table>
                                    @*<div style="height:200px; overflow:auto;">
                                        
                                        
                                    </div>*@
                                    <h3>Planned Boreholes</h3>
                                    <table id="Boreholes_Planned" style="height: 200px;"></table>
                                    @*<div style="height:200px; overflow:auto;">
                                        
                                    </div>*@

                                    @*<input type="button" class="DownloadSurveyPlan" onclick="DownloadSurveyPlan()" value="Download Survey Plan" />*@

                                </div>

                                <div class="wizard-step" name="WS" id="WS25">
                                    <h3>Field Assessment: Load Borehole Data</h3>
                                    <br />
                                    <div id="FieldAssessmentIntro">Once you've collected your borehole data, you can upload it to the PFF DSS to continue your assessment.  The table below lists the planned boreholes.  Use the <b>ADD</b> buttons to upload data for the borehole.<br /><br />When you're done, you can plot the data along with your resistivity data by using the <b>PLOT</b> buttons.</div>
                                    <br />
                                    @*<input type="button" id="ImportBH" name="ImportBH" value="Import Borehole Data" onclick='ImportBoreholeData()' />*@
                                    @*<input type="button" id="MapBH" name="MapBH" value="Map Boreholes" onclick='MapBoreholes()' />*@
                                    @*<input type="button" id="ChartBH" name="ChartBH" value="Chart Transect" onclick='HandleOpenPlotter_Full()' />*@
                                    @*<input type="button" id="Plot3D" name="Plot3D" value="3D Plot" onclick='HandleOpen3DPlotter()' />*@

                                    <div style="height:450px; padding:10px; overflow:auto;">
                                        <table border="1" id="BoreholeTable"></table>
                                    </div>

                                </div>

                                <div class="wizard-step" name="WS" id="WS26">
                                    <h3>Assessment Area Stability and Thaw Settlment Potential</h3>
                                    <br />
                                    <div id="AssesmentAreaStabilityIntro">Now that you've loaded resistivity and borehole data, the DSS can estimate the stability of your assessment area and the potenital settlement from thawing.  The tools below use your borehole data to conduct this analysis. <br /><br /> 
                                    The stability assessment uses moisture content, soil type, and existence of permafrost from the borehole core data to estimate the depth of the stable layer at each borehole.  Then the tool interpolates the data on the map to show depth to stable layer in the region where you did borehole analysis.  When you float the mouse over the surface, the depth to the stable layer in meters is displayed.<br /><br />
                                    The thaw settlement assessment assumes that a heated slab-on-grade building is placed at each borehole, and estimates the potential thaw settlement.  It then interpolates the thaw settlement estimates to produce a mapped estimate.  When you float over the map, the estimated thaw settlement is centimeters is shown.<br /><br />
                                    Click the buttons below to show the assessment results.</div>
                                    <br /><br />

                                    <div class="button">
                                        <input type="button" value="Show Stability Assessment" name="RunStabilityAssessmentBtn" id="RunStabilityAssessmentBtn" onclick='RunStabilityAssessment()' />
                                        <br /><br />
                                        <input type="button" value="Show Thaw Settlement Assessment" name="RunThawSettlementAssessmentBtn" id="RunThawSettlementAssessmentBtn" onclick='RunThawSettlementAssessment()' />

                                    </div>
                                </div>




                                <div class="wizard-step" name="WS" id="WS27">
                                    <h3>Specifying Building Site Location</h3>
                                    <br />
                                    <div id="BuildingSiteIntro">Your field assessment data will likely indicate preferable locations within your assessment area to place your building site.  Areas with stable soils at depth and areas that are unfrozen are good examples.<br /><br />Use the drawing tool below to place your building site on the map in the approximate location you'd like to put it.</div>
                                    <br />
                                    <div class="button">
                                        <input type="button" value="Place Building Site" name="PlaceBuildingSite" id="PlaceBuildingSite" />
                                    </div>
                                    <div class="button">
                                        <input type="button" value="Rotate Building Left" name="RotateBuildingLeftBtn" id="RotateBuildingLeftBtn" onclick='RotateBuildingLeft()' />
                                    </div>
                                    <div class="button">
                                        <input type="button" value="Rotate Building Right" name="RotateBuildingRightBtn" id="RotateBuildingRightBtn" onclick='RotateBuildingRight()' />
                                    </div>
                                                <br />
                                                <div id="PlaceBuildingSiteResult"><canvas id="PlaceBuildingSiteResultCanvas" width="500" height="400"></canvas></div>

                                            </div>

                                <div class="wizard-step" name="WS" id="WS28">
                                    <h3>Evaluating Foundation Types</h3>
                                    <br />
                                    <div id="FoundationTypeIntro">With data from both your desktop and field assessments, the PFF DSS can now evaluate foundation options for your proposed site.<br /><br />Click the button below to see the assessment.</div>
                                    <br />
                                    <div class="button">
                                        <input type="button" value="Show Foundation Type Assessment" name="ShowFoundationTypeAssessmentBtn" id="ShowFoundationTypeAssessmentBtn" onclick='ShowFoundationTypeAssessment()' />
                                    </div>
                                </div>



                                <legend>Assessment</legend>

                                @*<div class="editor-label">
                                        @Html.LabelFor(model => model.AssessmentName)
                                    </div>
                                    <div class="editor-field">
                                        @Html.EditorFor(model => model.AssessmentName)
                                        @Html.ValidationMessageFor(model => model.AssessmentName)
                                    </div>*@


                            </fieldset>
                        }


                    </div>

                </div>

            </td>
            @*<td>
                    <div id="DonorsDiv" style="width:100px">
                        @Html.EditorForModel()
                        <p>
                            <input type="submit" value="Save" />
                        </p>
                    </div>
                </td>*@

            <td width="80%" rowspan="3">

                <div id="theMap6" style="z-index:1; width:100%; height:100%;">
                    @Html.Partial("../Donor/_Map", model: Model)
                </div>
            </td>

        </tr>

        <tr style="background-color:transparent; padding: 20px; height:200px; max-height:200px; vertical-align:top;">

            <td style="display: block; vertical-align:top; text-align:center; margin: auto; background-color:white; padding:0px; max-height:50px; display:inline-block;">
                <div style="display:inline-block; width:100%; height:100%; vertical-align:top; background-color:white;" title="The Development Difficulty Factor (DDF) summarizes the anticipated level of difficulty to develop this site for your structure. The higher the DDF, the more difficult or costly it might be due to the presence of ground ice.
There are five criteria that are considered in the DDF as shown in the graphic; in order, they are Material Type, Ice Content, Vegetation, Required Resiliency, and Cost. The scale on the left ranges from 0 to 10. By default, each item initially has an intermediate value of 5 and is shown as the short dash on the vertical line. As you answer the survey questions, the value for the criterion will increase or decrease so you can immediately view the impact of your choices by looking at the graph. The DFF is the sum of all five criteria, with a maximum value of 50. As the DDF decreases, it will be easier and less costly to install the structure.">

                    <div id="chartContainer" style="height:200px; width: 500px; display:inline-block; vertical-align:top; background-color:white;"> </div>

                    <br />

                    <input type="hidden" name="MT" id="MT" value="5">
                    <input type="hidden" name="IC" id="IC" value="5">
                    <input type="hidden" name="V" id="V" value="5">
                    <input type="hidden" name="R" id="R" value="5">
                    <input type="hidden" name="C" id="C" value="5">

                    <input type="hidden" name="MT_ErrorMargin" id="MT_ErrorMargin" value="4">
                    <input type="hidden" name="IC_ErrorMargin" id="IC_ErrorMargin" value="4">
                    <input type="hidden" name="V_ErrorMargin" id="V_ErrorMargin" value="4">
                    <input type="hidden" name="R_ErrorMargin" id="R_ErrorMargin" value="4">
                    <input type="hidden" name="C_ErrorMargin" id="C_ErrorMargin" value="4">
                </div>

            </td>

        </tr>

        <tr style="background-color:white; padding: 10px; max-height:0px; vertical-align:bottom; margin: auto; display:block; position:relative;">

            <td style="display: block; vertical-align:bottom; text-align:center; margin: auto; background-color:white; padding:0px; max-height:30px; display:block; position:relative;">
                <div class="button" style="display:inline-block;">
                    <input type="button" id="back-step" name="back-step" value="< Back" style="display:inline; margin:auto;" />
                </div>
                <div class="button" style="display:inline-block;">
                        <input type="button" id="next-step" name="next-step" value="Next >" style="display:inline; margin:auto;" />
                </div>
                <div class="button" style="display:inline-block;">
                            <input type="button" value="Save" onclick="CLearStateAndUpdateAssessmentInDB(this)" style="display:inline; margin:auto;" />
                </div>

                            @*<div style="align-content:center; max-height:10px; display:inline-block; align-items:center; vertical-align:bottom;  align-self:center;">

            </div>*@
</td>

        </tr>



        <tr>
            <td style="background-color:white;"> </td>
            <td width="80%" style="background-color:white;">
                <input style="position: relative; z-index:1" type="checkbox" name="StreetMapControl" checked="checked" onclick='AdjustStreetMap()'>Street Map
                <input style="position: relative; z-index:1" type="checkbox" name="SatelliteMapControl" checked="checked" onclick='AdjustSatelliteMap()'>Satellite
                <input style="position: relative; z-index:1" type="checkbox" name="GeologicUnitMapControl" id="GeologicUnitMapControl" checked="checked" onclick='AdjustGeologicUnitMap()'>Geologic Units
            </td>
        </tr>
    </table>

</div>




@*the modal and its overlay*@ 
<div id="modalOverlay">
    <div id="modal" style="height:90%; position:relative;">
        @*<span class="modalClose"></span>*@
        <div id="AssessmentResultsDiv">

            <div id="ChartControls" style="display:block; width:1000px; height:60px; background-color:lightgray; position:relative;">
                <div id="AssessmentResultsTitle" style="display:inline-block; height:100%; margin:0px 0px 0px 10px">
                    <h1>Desktop Assessment Results</h1>
                </div>
                <button class="modalClose" style="position:absolute; top:10px; left:900px; display:inline-block; width:100px; height: 40px;">Close</button>
                @*<input type="button" id="ShowAssessmentSummary" name="ChartBH" value="Conclusions & Recommendations" onclick='showAssessmentSummary()' style="position:absolute; top:10px; left:800px; display:inline-block; width:100px; height: 40px;" />
                    <input type="button" id="ShowAssessmentMain" name="ChartBH" value="Assessment Detail" onclick='showAssessmentMain()' style="position:absolute; top:10px; left:700px; display:inline-block; width:100px; height: 40px;" />*@
                <button class="ShowAssessmentSummary" onclick="showAssessmentSummary()" style="position:absolute; top:10px; left:750px; display:inline-block; width:150px; height: 40px;">Conclusions Recommendations</button>
                <button class="ShowAssessmentMain" onclick="showAssessmentMain()" style="position:absolute; top:10px; left:650px; display:inline-block; width:100px; height: 40px;">Assessment Detail</button>



            </div>




            <div id="AssessmentResultsMain">
                <table border="0" id="AssessmentResultsTable">
                    <tr>
                        <td width="33%" valign="top" padding="10">
                            <div id="TerrainUnitConditions" style="overflow:auto; height:100%;">
                                <h3 id="TerrainUnitTitle">Assessment Area Conditions</h3>
                                <h5 id="NumTerrainUnits"></h5>
                                <div id="TerrainUnitDescription">&nbsp;</div>
                            </div>
                        </td>
                        <td width="33%" valign="top" padding="10">
                            <div id="IceContentPermafostExtentConditions">
                                <h3 id="IceContentPFTitle"></h3>
                                <div id="IceContentDescription"></div>
                            </div>
                        </td>

                        <td width="33%" valign="top" padding="10">
                            <div id="DevelopmentDifficulty" stlye="overflow:auto; height;500px;">

                                <h3 id="DDFTitle"></h3>
                                <div id="DDFDescription"></div>
                                <br />
                                <div id="resultsChartContainer" style="width:100%; height:200px;">
                                </div>
                            </div>
                        </td>

                    </tr>
                </table>

            </div>

            <div id="AssessmentResultsSummary">

            </div>

        </div>

        <div id="BoreholeChart" style="position:absolute; top:0px; height:100%;">

            <div id="ChartControls" style="display:block; width:1000px; height:60px; background-color:lightgray; position:relative;">
                <div id="TransectPlotTitle" style="display:inline-block; height:100%; margin:0px 0px 0px 10px">
                    <h1>Transect</h1>
                </div>
                <input id="StationStart" style="position:absolute; top:30px; left:200px; display:inline-block; width:50px; height: 15px;" />
                <p style="position:absolute; top:0px; left:200px; display:inline-block; width:50px; height: 10px;">Start</p>

                <input id="StationEnd" style="position:absolute; top:30px; left:260px; display:inline-block; width:50px; height: 15px;" />
                <p style="position:absolute; top:0px; left:260px; display:inline-block; width:50px; height: 10px;">End</p>

                <input id="MinElevation" style="position:absolute; top:30px; left:320px; display:inline-block; width:50px; height: 15px;" />
                <p style="position:absolute; top:0px; left:320px; display:inline-block; width:60px; height: 10px;">Min. Elev.</p>

                <input id="MaxElevation" style="position:absolute; top:30px; left:380px; display:inline-block; width:50px; height: 15px;" />
                <p style="position:absolute; top:0px; left:380px; display:inline-block; width:60px; height: 10px;">Max. Elev.</p>

                <button class="RefreshCharts" onclick="RefreshPlots()" style="position:absolute; top:10px; left:450px; display:inline-block; width:70px; height: 40px;">Refresh Plots</button>
                <button class="ZoomToAll" onclick="ZoomPlotsToAllData()" style="position:absolute; top:10px; left:525px; display:inline-block; width:80px; height: 40px;">Zoom to All</button>


                <p style="position:absolute; top:0px; left:620px; display:inline-block; width:60px; height: 10px;">Boreholes</p>
                <select id="Boreholes" name="Boreholes" style="width:100px; height:20px; position:absolute; left:620px; top:30px;"></select>

                <button class="AddBorehole" onclick="HandleNewBorehole()" style="position:absolute; top:30px; left:680px; display:inline-block; width:20px; height: 20px;">+</button>
                <button class="DeleteBorehole" style="position:absolute; top:30px; left:700px; display:inline-block; width:20px; height: 20px;">x</button>
                @*<button class="SuggestBoreholes" style="position:absolute; top:10px; left:700px; display:inline-block; width:100px; height: 40px;">Suggest Locations</button>*@

                @*<button class="ShowTransectConclusion" style="position:absolute; top:10px; left:840px; display:inline-block; width:100px; height: 40px;">Show DSS Intrepretation</button>*@
                <button class="modalClose" style="position:absolute; top:10px; left:940px; display:inline-block; width:60px; height: 40px;">Close</button>

            </div>


            <div id="TransectPanel_Elevation" style="position:relative; width:100%; height:20%; display:inline-block; vertical-align:top; background-color:white;">
                <div id="TransectElevationDiv" style="width:100%; height:100%; display:block; vertical-align:top; background-color:white; margin:0px 0px 20px 0px; ">

                </div>
                @*<div id="ElevStart" style="position:absolute; top:80px; left:30px; width:30px; height:20px; background-color:white;"></div>
                    <div id="ElevEnd" style="position:absolute; top:80px; left:950px; width:30px; height:20px; background-color: white;"></div>*@
            </div>

            <div id="TransectPanel1" style="width:100%; height:25%; display:inline-block; vertical-align:top; background-color:white; position:relative;">
                <button class="FineTuneBtn" onclick="MoveLeftSideLeft()" style="position:absolute; top:0px; left:10px; display:inline-block; width:30px; height: 20px;"><<</button>
                <button class="FineTuneBtn" onclick="MoveLeftSideRight()" style="position:absolute; top:0px; left:40px; display:inline-block; width:30px; height: 20px;">>></button>
                <text class="Resistivity Hint" style="position:absolute; top:0px; left:100px; display:inline-block; width:300px; height: 20px;">In general, resistivity is very high in frozen layers.</text> 
                <button class="FineTuneBtn" onclick="MoveRightSideLeft()" style="position:absolute; top:0px; left:930px; display:inline-block; width:30px; height: 20px;"><<</button>
                <button class="FineTuneBtn" onclick="MoveRightSideRight()" style="position:absolute; top:0px; left:960px; display:inline-block; width:30px; height: 20px;">>></button>

                <div id="ResistivityDataHelp" style="float:left; width:100%; height:100%; text-align:center;">
                    <h2 style="color:lightgray;">Resistivity Data </h2>
                    <p style="color:lightgray;">Resitivity is typically the first dataset you should collect along a transect.<br>It provides a cost-effective means of discovering subsurface features.<br>Once you collect the data, you can add it to the PFF DSS and it will be charted here.</p>
                </div>
                <div id="ResistivityImageContainer" style="Float:left; position: absolute; top:25px; left:0px; width:100%; height:90%; display:inline-block; vertical-align:top;">
                </div>
            </div>
            <div id="TransectPanel2" style="position:relative; width:100%; height:24%; display:inline-block; vertical-align:top; background-color:white;">
                <div style="float:left; width:100%; height:100%; text-align:center;">
                    <h2 style="color:lightgray;">Borehole Data </h2>
                    <p style="color:lightgray;">An important dataset to collect on your site is borehole data.<br>Use the borehole planning buttons above to specify where your boreholes will be.<br>Once you collect the data, you can add it to the PFF DSS and it will be charted here.</p>
                </div>
                <div id="boreholeChartContainer" style="Float:left; position: absolute; top:0px; left:0px; width:100%; height:100%; display:inline-block; vertical-align:top"></div>
                <div id="BHChartLegend" style="float:left; position: absolute; z-index:20; top:0px; left:10px; width:150px; height:40px;"></div>
            </div>
            <div id="TransectPanel3" style="position:relative; width:100%; height:24%; display:inline-block; vertical-align:top; background-color:white;">
                <div style="float:left; width:100%; height:100%; text-align:center;">
                    <h2 style="color:lightgray;">Borehole Data </h2>
                    <p style="color:lightgray;">An important dataset to collect on your site is borehole data.<br>Use the borehole planning buttons above to specify where your boreholes will be.<br>Once you collect the data, you can add it to the PFF DSS and it will be charted here.</p>
                </div>
                <div id="stabilityChartContainer" style="Float:left; position: absolute; top:0px; left:0px; width:100%; height:100%; display:inline-block; vertical-align:top"></div>
                <div id="StabilityChartLegend" style="float:left; position: absolute; z-index:20; top:0px; left:10px; width:150px; height:40px;"></div>
            </div>
            @*<input type="button" id="ChartBHStability" name="ChartBH" value="Chart Stability" onclick='ChartBHStability()' />
                <input type="button" id="ChartBHTraditional" name="ChartBH" value="Chart Soil Types" onclick='ChartSoilTypes()' />*@

            @*<div id="TransectConclusionsDiv" >
                    <p id="TransectConclusions" style="width:100%;"></p>
                </div>*@

        </div>

        <div id="ImportBoreholeDataDiv"  style="background-color: white; position: absolute; top: 0px; width:1000px; height:inherit; overflow:auto; overflow-x:hidden; overflow-y:auto;">
            
            <table id="InputDataTable" style="border-width:0px">
                <tr>
                    <td width="100%" style="padding:10px;" colspan="2">
                        <h3 id="ImportDataTitle">Import Borehole Data</h3>
                        @*<div id="ImportData" style="overflow:auto; height:100%;">
                           
                        </div>*@
                    </td>
                </tr>
                <tr style="background-color: white;">
                    <td width="50%" padding="5px" valign="top">
                        <h3>Step 1: Location Data</h3>
                        <p style="padding:10px;">Paste your Borehole Location Data here.  It should have five columns - ID, Latitude, Longitude, Station, Elevation.  The Latitude and Longitude columns should be decimal degrees with at least 5 decimal places.  Elevations should be in meters.</p><br />
                        <p>Note, do not include the headers in your copied data.</p>
                        <textarea name="excel_data" style="width:40%;height:100px;padding:10px;"></textarea><br>
                        <div class="button">
                            <input type="button" onclick="javascript:generateTable()" value="Import Borehole Location Data" />
                        </div>
                        <br><br>
                        <p style="padding:5px;">Location Data will appear in table below</p>
                        <hr>
                        <div id="excel_table" style="padding:10px;"></div>
                    </td>
                    <td width="50%" padding="5px" valign="top">
                        <h3>Step 2: Core Data</h3>
                        <p style="padding:10px;">Paste your Borehole Core Data here.  It should have six columns - BoreholeID, Depth, USCS_code, PF_code, GMC, Notes.  The Depths should be in centimeters.</p><br />
                        <p>Note, do not include the headers in your copied data.</p>
                        <br />
                        <textarea name="excel_data_Samples" style="width:40%;height:100px;padding:10px;"></textarea><br>
                        <div class="button">
                            <input type="button" onclick="javascript:generateTable_Samples()" value="Import Borehole Core Data" />

                        </div>
                        <br><br>
                        <p style="padding:5px;">Sample Data will appear in table below</p>
                        <hr>
                        <div id="excel_table_Samples" style="padding:10px;"></div>
                    </td>
                </tr>
            </table>

            <div id="InputDataMain">

                <button class="modalClose" onclick="javascript:ImportBHDataFromForm()">Import Data</button>
                <br /> <br />
                <button class="modalClose">Close</button>


            </div>

        </div>

        <div id="UploadImageDiv" style="background-color: transparent; position: absolute; top: 20px; width:1000px;">
            <div id="UploadImageMain">

                <table border="0" id="UploadImageTable">
                    <tr>
                        <td width="100%" valign="top" padding="10" colspan="2">
                            <div id="ImportData" style="overflow:auto; height:100%;">
                                <h3 id="UploadImageTitle">Upload Transect Image</h3>
                            </div>
                        </td>
                    </tr>
                    <tr style="background-color: white;">
                        <td width="50%" padding="10" valign="top">
                            <p style="padding:10px;">Click the Browse button to identify the image, then enter the image properties and click upload.</p>
                            <input type="file" id="imageUploadForm" name="image" multiple="multiple" />
                            <br><br>
                            Start Station (m):
                            <input type="text" id="StartStation" name="StartStationTxt"/>
                            End Station (m):
                            <input type="text" id="EndStation" name="StartStationTxt" />
                            <hr>
                        </td>
                    </tr>
                </table>
                <button class="modalClose" onclick="javascript:UploadSelectedPlotAndAddtoDatabase()" style="display:inline-block; width:100px; height: 40px;">Upload Image to Database</button>
                <br /><br />
                <button class="modalClose" style="display:inline-block; width:100px; height: 40px;">Close</button>

            
             </div>
            

        </div>



        <div id="FoundationTypeResults" style="position:absolute; top:0px; height:100%;">
            <div id="FTResultsControls" style="display:block; width:1000px; height:60px; background-color:lightgray; position:relative;">
                <div id="FoundationTypeAssessmentResultsTitle" style="display:inline-block; height:100%; margin:0px 0px 0px 10px">
                    <h1>Foundation Type Assessment Results</h1>
                </div>
                <button class="modalClose" style="position:absolute; top:10px; left:900px; display:inline-block; width:100px; height: 40px;">Close</button>
                @*<button class="ShowAssessmentSummary" onclick="showAssessmentSummary()" style="position:absolute; top:10px; left:750px; display:inline-block; width:150px; height: 40px;">Conclusions Recommendations</button>
                <button class="ShowAssessmentMain" onclick="showAssessmentMain()" style="position:absolute; top:10px; left:650px; display:inline-block; width:100px; height: 40px;">Assessment Detail</button>*@
            </div>
            <table border="0" id="FoundationTypeResultsTable" style="padding:20px;">
            </table>
            <div id="FoundationTypeAssessmentConclusions" style="padding:20px;">

            </div>
        </div>

        <div id="Plot3DDiv" style="position:absolute; top:0px; height:100%;">
            <div id="Plot3DControls" style="display:block; width:1000px; height:60px; background-color:lightgray; position:relative;">
                <div id="Plot3DTitle" style="display:inline-block; height:100%; margin:0px 0px 0px 10px">
                    <h1>Assessment Area Plot</h1>
                </div>
                <button class="modalClose" style="position:absolute; top:10px; left:900px; display:inline-block; width:100px; height: 40px;">Close</button>
                @*<button class="ShowAssessmentSummary" onclick="showAssessmentSummary()" style="position:absolute; top:10px; left:750px; display:inline-block; width:150px; height: 40px;">Conclusions Recommendations</button>
                <button class="ShowAssessmentMain" onclick="showAssessmentMain()" style="position:absolute; top:10px; left:650px; display:inline-block; width:100px; height: 40px;">Assessment Detail</button>*@
            </div>

            <div id="Plot3DMainDiv" style="padding:20px; height:100%;">
                <canvas id="Plot3DCanvas" style="height:100%; width:100%; background-color: red;"></canvas>
            </div>
        </div>




    </div>
        @*<input class="closesModal" type="button" value="Close" style="position:absolute; top:690px; left:50px;" />*@
</div>



    @*<div>
        @Html.ActionLink("Back to List", "Index")
    </div>*@


    <script type="text/javascript">

        function show(id, value) {
            document.getElementById(id).style.visibility = value;
            document.getElementById(id).style.display = value ? 'block' : 'none';
        }

        $(document).ready(function() {
            MapBoreholes();

        });


        var chart = CanvasJS.Chart;

        var BoreholeChart = CanvasJS.Chart;


        var dps;   //dataPoints.


        function CreateTransectHiddens() {

            //create the transect blob hidden field from the current assessments

            var theTPropsString = "";
            var theTBlobString = "";

            var model = @Html.Raw(Json.Encode(Model));

            var wgs84Sphere = new ol.Sphere(6378137);

            if (model.Transects != null) {
                if (model.Transects.length > 0) {
                    for (var i = 0; i < model.Transects.length; i++) {
                        var thisTransect = model.Transects[i];
                        var PointCoordString = "";
                        var RealLength = 0;
                        for (var j = 0; j < thisTransect.TransectPoints.length; j++) {
                            var thisTP = thisTransect.TransectPoints[j];
                            var thispointgeom = new ol.geom.Point([thisTP.Longitude, thisTP.Latitude]);
                            var coord1 = thispointgeom.getCoordinates();
                            PointCoordString = PointCoordString + thisTP.Longitude + "," + thisTP.Latitude + ",";
                            if (j > 0) {
                                RealLength = RealLength + wgs84Sphere.haversineDistance(lastcoord1, coord1);
                            }
                            var lastcoord1 = coord1;
                        }
                        theTPropsString = theTPropsString + "; " + thisTransect.TransectName + ", " + RealLength;
                        theTBlobString = theTBlobString + "; " + PointCoordString;
                    }
                }

            }

            document.getElementById("TransectProps").value = theTPropsString;
            document.getElementById("TransectBlob").value = theTBlobString;

            MapTransects();

        }

        function UpdateDDFChartData() {

            var CurrentMT = Math.floor(document.getElementById("MT").value);
            var CurrentIC = Math.floor(document.getElementById("IC").value);
            var CurrentV = Math.floor(document.getElementById("V").value);
            var CurrentR = Math.floor(document.getElementById("R").value);
            var CurrentC = Math.floor(document.getElementById("C").value);

            var CurrentMT_ErrorMargin = Math.floor(document.getElementById("MT_ErrorMargin").value);
            var CurrentIC_ErrorMargin = Math.floor(document.getElementById("IC_ErrorMargin").value);
            var CurrentV_ErrorMargin = Math.floor(document.getElementById("V_ErrorMargin").value);
            var CurrentR_ErrorMargin = Math.floor(document.getElementById("R_ErrorMargin").value);
            var CurrentC_ErrorMargin = Math.floor(document.getElementById("C_ErrorMargin").value);

            //var Margin = (20 - NumQuestionsAnswered) / 20 * 3 + 1;

            dps = [{ x: 1, y: [CurrentMT, CurrentMT + CurrentMT_ErrorMargin, CurrentMT - CurrentMT_ErrorMargin, CurrentMT], label: 'Material Type' },
                { x: 2, y: [CurrentIC, CurrentIC + CurrentIC_ErrorMargin, CurrentIC - CurrentIC_ErrorMargin, CurrentIC], label: 'Ice Content' },
                { x: 3, y: [CurrentV, CurrentV + CurrentV_ErrorMargin, CurrentIC - CurrentV_ErrorMargin, CurrentIC], label: 'Vegetation' },
                { x: 4, y: [CurrentR, CurrentR + CurrentR_ErrorMargin, CurrentR - CurrentR_ErrorMargin, CurrentR], label: 'Resiliency' },
                { x: 5, y: [CurrentC, CurrentC + CurrentC_ErrorMargin, CurrentC - CurrentC_ErrorMargin, CurrentC], label: 'Cost' }];   //dataPoints.

        }




        function ImportBoreholeData(theTransectName) {

            document.getElementById("CurrentTransectName").value = theTransectName;

            //populate the transects with borehole data
            HandleToolVisibility("ImportBHData");
            OpenImporter();


        }

        function ImportBHDataFromForm() {

            //the data is in the data tables
            //convert the data into the BHLocationData and BHSampleData hidden variables
            var refTab=document.getElementById("excel_table").firstChild;
            var BoreholeLocationInfoString = "";
            var  ttl;
            // Loop through all rows and columns of the table and popup alert with the value
            // /content of each cell.
            row = refTab.rows[1];
            var subTable = row.cells[0].firstChild.firstChild;
            for ( var i = 0; i < subTable.rows.length; i++ ) {
                row2 = subTable.rows[i];
                for ( var j = 0; j < row2.cells.length; j++ ) {
                    if (j == 1) {
                        var thisLat = row2.cells[j].innerHTML;
                        var thisLon = row2.cells[j+1].innerHTML;
                        //var newPoint = new ol.geom.Point(ol.proj.transform([thisEasting, thisNorthing],'EPSG:3857', 'EPSG:4326'));
                        var newPoint = new ol.geom.Point([thisLon, thisLat]);

                        var NPCoord = newPoint.getCoordinates();
                        BoreholeLocationInfoString = BoreholeLocationInfoString + NPCoord[0] + "," + NPCoord[1] + ",";
                        j = j + 1;
                    } else {
                        BoreholeLocationInfoString = BoreholeLocationInfoString + row2.cells[j].innerHTML + ",";
                    }
                }
                BoreholeLocationInfoString = BoreholeLocationInfoString.substring(0, BoreholeLocationInfoString.length-1);
                BoreholeLocationInfoString = BoreholeLocationInfoString + ";";
            }

            BoreholeLocationInfoString = BoreholeLocationInfoString.substring(0, BoreholeLocationInfoString.length-1);

            document.getElementById("BHLocationData").value = BoreholeLocationInfoString;

            var refTab2=document.getElementById("excel_table_Samples").firstChild;
            var BoreholeSamplenInfoString = "";
            var  ttl;
            // Loop through all rows and columns of the table and popup alert with the value
            // /content of each cell.
            for ( var i = 1; row = refTab2.rows[i]; i++ ) {
                row = refTab2.rows[i];
                var subTable = row.cells[0].firstChild.firstChild;
                for (var k = 0; row2 = subTable.rows[k]; k++) {
                    row2 = subTable.rows[k];
                    var thisBHString = "";
                    for ( var j = 0; col = row2.cells[j]; j++ ) {
                        thisBHString = thisBHString + "," + row2.cells[j].innerHTML;
                    }
                    thisBHString =  thisBHString.substring(1, thisBHString.length-1);
                    if (thisBHString.trim().length > 0) {
                        BoreholeSamplenInfoString = BoreholeSamplenInfoString + ";" + thisBHString;
                    }
                }
            }
            BoreholeSamplenInfoString = BoreholeSamplenInfoString.substring(1, BoreholeSamplenInfoString.length-1);

            document.getElementById("BHSampleData").value = BoreholeSamplenInfoString;

            UpdateAssessmentInDB(true);

        }

        function OpenImporter() {
            //disable drawing if it is enabled
            $("#CurrentDrawType").val("None").change();

            //update the title.
            document.getElementById("ImportDataTitle").innerHTML = "<h2>Import Data for " +  document.getElementById("CurrentTransectName").value  + "</h2>";

            var $modalOverlay = $('#modalOverlay');
            $modalOverlay.stop().fadeTo(500,1);

        }

        function generateTable() {

            $("#excel_table").html("");

            $('#excel_table').append('<table></table>');
            var table = $('#excel_table').children();
            table.append("<tr height=80px><th width=75px>BoreholeID</th><th width=75px>Latitude</th><th width=75px>Longitude</th><th width=75px>Station</th><th width=75px>Elevation</th>");

            var DataTable = "<tr><td colspan=5><div class=\'scroll\'><table width=100%>";

            var data = $('textarea[name=excel_data]').val();
            console.log(data);
            var rows = data.split("\n");

            for(var y in rows) {
                var cells = rows[y].split("\t");
                var row = "<tr>";
                for(var x in cells) {
                    row = row.concat("<td>" + cells[x] + "</td>");
                     }
                row = row.concat("</tr>");
                DataTable = DataTable.concat(row);
            }

            DataTable = DataTable.concat("</table></div></td></tr>")

            table.append(DataTable);
        }

        function generateTable_Samples() {

            $("#excel_table_Samples").html("");

            $('#excel_table_Samples').append('<table></table>');
            var table = $('#excel_table_Samples').children();

            table.append("<tr height=80px><th width=75px>BoreholeID</th><th width=75px>Depth</th><th width=75px>USCS_code</th><th width=75px>PF_code</th><th width=75px>GMC</th><th width=75px>Notes</th>");

            var DataTable = "<tr><td colspan=6><div class=\'scroll\'><table width=100%>";

            var data = $('textarea[name=excel_data_Samples]').val();
            console.log(data);
            var rows = data.split("\n");

            for(var y in rows) {
                var cells = rows[y].split("\t");
                var row = "<tr>";
                for(var x in cells) {
                    row = row.concat("<td>" + cells[x] + "</td>");
                }
                row = row.concat("</tr>");
                DataTable = DataTable.concat(row);
            }

            DataTable = DataTable.concat("</table></div></td></tr>")

            table.append(DataTable);
        }

        function DownloadSurveyPlan() {

            window.alert("This functionality is coming soon.")

        }

            function HandleNewBorehole() {

                var x;
                var name=prompt("Please enter the proposed borehole station [m]","50");
                if (name!=null){
                    if (isNumeric(name)) {
                        var BoreHoleDropDown = document.getElementById("Boreholes");
                        var newBH = document.createElement('option');
                        newBH.text = newBH.value = name;
                        BoreHoleDropDown.add(newBH, 0);

                        //update the chart
                        var DesiredStationStart = $("#CurrentStationStartVal").val();
                        var DesiredStationEnd = $("#CurrentStationEndVal").val();
                        ShowTransectElevation(DesiredStationStart, DesiredStationEnd);

                    }
                }
            }

            function isNumeric(n) {
                return !isNaN(parseFloat(n)) && isFinite(n);
            }



            window.onload = function () {

                show('loading', false);

                var model = @Html.Raw(Json.Encode(Model));

                document.getElementById("AssessmentID").value = model.AssessmentID;

                EvaluateDDFfromAssessment();

                //UpdateTableSize();
                UpdateDDFChartData();
                UpdateChart("chartContainer");
                CreateTransectHiddens();
                GoToWizardStep(model.CurrentStep);
                RunBuildingSiteAssessment();
                ZoomToAssessment();
                document.getElementById("GeologicUnitMapControl").checked = false;
                AdjustGeologicUnitMap();

                if (model.Transects != null) {
                    for (var i = 0; i < model.Transects.length; i++) {
                        var thisTransect = model.Transects[i];
                        for (var j = 0; j < thisTransect.TransectPoints.length; j++) {
                            var thisTP = thisTransect.TransectPoints[j];
                            var thisX = thisTP.Longitude;
                            var thisY = thisTP.Latitude;
                            GetNEDElevation(thisX,thisY);
                        }
                    }
                }




                //UpdateMapToken();

                SceneJS.setConfigs({
                    pluginPath: "../../Scripts/plugins"
                });

            }

            function UpdateMapToken() {
                $.ajax({
                    type: "POST",
                    url: "/Wizard/GetEsriToken",

                    error: function(xhr, status, error) {
                        debugger;
                    },

                    success: function(response) {
                        //UpdateAssessmentInDB();
                    }
                });
            }


            function UpdateProposedBoreholes() {

                var newProposedBHText = "";

                var BHDropDown = document.getElementById("Boreholes");
                if (BHDropDown.length > 0) {
                    for(var i=0; i < BHDropDown.length; i++)
                    {
                        var thisval = Number(BHDropDown.options[i].value);
                        newProposedBHText = newProposedBHText + ";" +  document.getElementById("ResistivityVisible").value + "," + thisval;
                    }
                }

                document.getElementById("ProposedBoreholes").value = newProposedBHText;

            }

            function LoadProposedBoreholes() {


                var ProposedBoreholes = document.getElementById("ProposedBoreholes").value.split(";");

                var BHTable = document.getElementById("Boreholes_Planned");
                var BHTableHTML = "<tr><th>Id</th><th>Name</th><th>Transect</th><th>Station</th><th>Latitude</th><th>Longitude</th><th>Elevation</th></tr>";

                if (ProposedBoreholes.length > 0) {
                    for (var i = 0; i < ProposedBoreholes.length; i++) {
                        var thisBHData = ProposedBoreholes[i].split(",");
                        if (thisBHData.length > 1) {
                            var thisBHTransect = thisBHData[0];
                            var thisBHId = i;
                            var thisBHStation = thisBHData[1];
                            var thisBHName = "T3_" + thisBHStation;

                            BHTableHTML = BHTableHTML + "<tr><td>" + thisBHId + "</td>" +
                                "<td>" + thisBHName + "</td>" +
                                "<td>" + thisBHTransect + "</td>" +
                                "<td>" + thisBHStation + "</td>" +
                                "<td>" + "-99" + "</td>" +
                                "<td>" + "-99" + "</td>" +
                                "<td>" + "-99" + "</td>" + "</tr>"
                        }

                    }
                }

                BHTable.innerHTML = BHTableHTML

            }

            function isProposedBorehole(theStation) {

                //first get the list of proposed boreholes
                var ProposedBoreholes = document.getElementById("ProposedBoreholes").value.split(";");
                var ProposedBHStations = [];

                if (ProposedBoreholes.length > 0) {
                    for (var i = 0; i < ProposedBoreholes.length; i++) {
                        var thisBHData = ProposedBoreholes[i].split(",");
                        if (thisBHData.length > 1) {
                            var thisBHTransect = thisBHData[0];
                            var thisBHId = i;
                            var thisBHStation = thisBHData[1];
                            var thisBHName = "T3_" + thisBHStation;

                            ProposedBHStations.push(thisBHStation);
                        }
                    }

                    for (var j = 0; j < ProposedBHStations.length; j++) {

                        if (Number(ProposedBHStations[j]) == Number(theStation)) {
                            return true;
                        }
                    }
                }

                return false;

            }

            function LoadBoreholes() {

                //only load boreholes that match up with the proposed boreholes

                    var model = @Html.Raw(Json.Encode(Model));

                    var BHTable = document.getElementById("BoreholeTable");
                    var BHTableHTML = "<tr><td>Id</td><td>Name</td><td>Latitude</td><td>Longitude</td><td>Elevation</td></tr>";

                    for (var i = 0; i < model.Boreholes.length; i++) {
                        var thisBorehole = model.Boreholes[i];
                        //if (isProposedBorehole(thisBorehole.Station)) {
                        var AddDataBtnHTML = "<div class='button'><input type='button' value='Add Data' name='AddBoreholeDataBtn' id='AddBoreholeData_" + thisBorehole.Name + "'/></div>"
                            BHTableHTML = BHTableHTML + "<tr><td>" + thisBorehole.BoreholeId + "</td>" + "<td>" + thisBorehole.BoreholeName + "</td>" + "<td>" + thisBorehole.Latitude + "</td>" + "<td>" + thisBorehole.Longitude + "</td>" + "<td>" + thisBorehole.Elevation + "</td>" + "<td>" + AddDataBtnHTML + "</td>" +  "</tr>"
                        //}
                    }

                    BHTable.innerHTML = BHTableHTML



            }

            function LoadTransects(TableType, TargetTableContainer) {

                //the drawn transect descriptions are stored in a hidden field called TransectProps

                if (TableType == "Basic") {
                    var TransectTable = document.getElementById(TargetTableContainer);
                    var TransectTableHTML = "<tr><th>Name</th><th>Length</th><th>Plot</th><th>Delete</th></tr>";

                    var theTransectProps = document.getElementById("TransectProps").value.split(";");

                    if (theTransectProps != "") {
                        for (var i = 0; i < theTransectProps.length; i++) {
                            var thisTransectProps = theTransectProps[i].split(",");
                            var thisTransectName = thisTransectProps[0];
                            if (thisTransectName != "") {
                                var thisTransectLength = Math.floor(thisTransectProps[1]);
                                var PlotBtnHTML = "<div class='button'><input type='button' value='Plot' name='PlotTransectBtn' onclick='HandleOpenPlotter_ElevationOnly(\"" + thisTransectName  + "\")' id='Plot_" + thisTransectName + "'/></div>"
                                var DeleteBtnHTML = "<div class='button'><input type='button' value='Delete' name='DeleteTransect' onclick='HandleDeleteTransect(\"" + thisTransectName  + "\")' id='DeleteTransect_" + thisTransectName + "'/></div>"
                                TransectTableHTML = TransectTableHTML + "<tr><td>" + thisTransectName + "</td>" + "<td>" + thisTransectLength + "</td>" + "<td>" + PlotBtnHTML + "</td>" + "<td>" + DeleteBtnHTML + "</td>" + "</tr>"
         
                            }
                         }
                    }

                    TransectTable.innerHTML = TransectTableHTML;

                } else if (TableType == "AddResistivityData") {
                    var TransectTable = document.getElementById(TargetTableContainer);
                    var TransectTableHTML = "<tr><th>Name</th><th>Length</th><th>Resistivity</th><th>Start Station</th><th>End Station</th><th>Max Depth</th><th>Plot</th></tr>";

                    var theTransectProps = document.getElementById("TransectProps").value.split(";");

                    for (var i = 0; i < theTransectProps.length; i++) {
                       
                        var thisTransectProps = theTransectProps[i].split(",");
                        var thisTransectName = thisTransectProps[0];
                        var thisTransectLength = Math.floor(thisTransectProps[1]);
                        if (thisTransectName != "") {
                            var AddDataBtnHTML = "<div class='button'><input type='button' value='Add' name='AddTransectResistivityBtn' onclick='UploadResistivityPlot(\"" + thisTransectName + "\")' id='AddResistivity_" + thisTransectName + "'/></div>"

                            var PlotBtnHTML = "<div class='button'><input type='button' value='Plot' name='PlotTransectBtn' onclick='HandleOpenPlotter_Resistivity(\"" + thisTransectName  + "\")' id='Plot_" + thisTransectName + "'/></div>"

                            var StartStationHTML = "37";

                            var EndStationHTML = "160";

                            var MaxDepthHTML = "27.6";

                            TransectTableHTML = TransectTableHTML + "<tr><td>" + thisTransectName + "</td>" + "<td>" + thisTransectLength + "</td>"  +  "<td>" + AddDataBtnHTML + "</td>" + "<td>" + StartStationHTML + "</td>" + "<td>" + EndStationHTML + "</td>" + "<td>" + MaxDepthHTML + "</td>" + "<td>" + PlotBtnHTML + "</td>" +   "</tr>"
        
                        }
                    }

                    TransectTable.innerHTML = TransectTableHTML;

                } else if (TableType == "DataImport") {


                    var TransectTable = document.getElementById(TargetTableContainer);
                    var TransectTableHTML = "<tr><th>Name</th><th>Length</th><th>Import</th><th>Plot</th></tr>";

                    var theTransectProps = document.getElementById("TransectProps").value.split(";");

                    for (var i = 0; i < theTransectProps.length; i++) {
                        var thisTransectProps = theTransectProps[i].split(",");
                        var thisTransectName = thisTransectProps[0];
                        if (thisTransectName != "") {
                            var thisTransectLength = Math.floor(thisTransectProps[1]);
                            var ImportBtnHTML = "<div class='button'><input type='button' value='Import Borehole Data' name='ImportTransectDataBtn' onclick='ImportBoreholeData(\"" + thisTransectName  + "\")' id='Import_" + thisTransectName + "'/></div>"
                            var PlotBtnHTML = "<div class='button'><input type='button' value='Plot' name='PlotTransectBtn' onclick='HandleOpenPlotter_Full(\"" + thisTransectName  + "\")' id='Plot_" + thisTransectName + "'/></div>"

                            TransectTableHTML = TransectTableHTML + "<tr><td>" + thisTransectName + "</td>" + "<td>" + thisTransectLength + "</td>" + "<td>" + ImportBtnHTML + "</td>" + "<td>" + PlotBtnHTML + "</td>" + "</tr>"

                        }

                    }

                    TransectTable.innerHTML = TransectTableHTML;


                }




            }

            function UpdateChart(targetContainer) {

                chart = new CanvasJS.Chart(targetContainer,
                    {
                        title: {
                            text: "Development Difficulty Factor",
                            fontColor: "blue",
                        },
                        axisX: {
                            labelFontSize: 16,
                            labelMaxWidth: 100
                        },
                        axisY: {
                            labelFontSize: 16,
                            maximum: 10,
                            minimum: 0
                        },
                        toolTip: {
                            content: "{label}: High {y[1]}, Expected {y[0]}, Low {y[2]}"
                        },
                        data: [
                        {
                            type: "candlestick",
                            dataPoints: dps
                        }
                        ]
                    });

                chart.render();

            }

            function ChartBHStability() {

                UpdateBoreholeChart("stabilityChartContainer", "Stability");

                var LegendDiv = document.getElementById("StabilityChartLegend");
                LegendDiv.innerHTML = "<img src='../../Images/StabilityLegend.png' width='100%'>";

            }

            function ChartSoilTypes() {

                UpdateBoreholeChart("boreholeChartContainer", "SoilTypes");

                var LegendDiv = document.getElementById("BHChartLegend");
                LegendDiv.innerHTML = "<img src='../../Images/SoilTypeLegend.png' width='100%'>";

            }


            function showAssessmentSummary() {

                var AssessmentMainDiv = document.getElementById("AssessmentResultsMain");
                AssessmentMainDiv.style.visibility = 'hidden';

                var AssessmentSummaryDiv = document.getElementById("AssessmentResultsSummary");
                AssessmentSummaryDiv.style.visibility = 'visible';

            }

            function showAssessmentMain() {

                var AssessmentMainDiv = document.getElementById("AssessmentResultsMain");
                AssessmentMainDiv.style.visibility = 'visible';

                var AssessmentSummaryDiv = document.getElementById("AssessmentResultsSummary");
                AssessmentSummaryDiv.style.visibility = 'hidden';


            }



            function RefreshPlots() {

                //Get booleans that control chart visibility
                var RezViz = document.getElementById("ResistivityVisible").value;
                var BHViz = document.getElementById("BoreholeChartsVisible").value;

                if (BHViz == "1") {
                    PlotTransect_Full();
                } else if (RezViz == "1") {
                    PlotTransect_Resistivity();
                } else {
                    PlotTransect_ElevationOnly();
                }

                ZoomPlotsToAllData();


            }

            function ZoomPlotsToAllData() {

                //figure out the min and max x and y across the charts

                //Get booleans that control chart visibility
                var RezViz = document.getElementById("ResistivityVisible").value;
                var BHViz = document.getElementById("BoreholeChartsVisible").value;

                if (BHViz == "1") {
                    //min and max should be from all data
                    SetCurrentResisitivityStations();
                    SetCurrentBoreholeStationsElevations();

                    var CurrentResStart = document.getElementById("CurrentResistivityStartStation").value;
                    var CurrentResEnd = document.getElementById("CurrentResistivityEndStation").value;
                    var CurrentTransectStart = document.getElementById("CurrentMinStation").value;
                    var CurrentTransectEnd = document.getElementById("CurrentMaxStation").value;
                    var CurrentBoreholeStart = document.getElementById("CurrentBoreholeStartStation").value;
                    var CurrentBoreholeEnd = document.getElementById("CurrentBoreholeEndStation").value;

                    var SelectedStartStation = CurrentTransectStart;
                    if (CurrentResStart != -99 && CurrentBoreholeStart != -99) {
                        SelectedStartStation = Math.max(CurrentTransectStart, Math.min(CurrentResStart, CurrentBoreholeStart));
                    } else if (CurrentResStart != -99) {
                        SelectedStartStation = Math.max(CurrentTransectStart, CurrentResStart);
                    } else if (CurrentBoreholeStart != -99) {
                        SelectedStartStation = Math.max(CurrentTransectStart, CurrentBoreholeStart);
                    }

                    var SelectedEndStation = CurrentTransectEnd;
                    if (CurrentResEnd != -99 && CurrentBoreholeEnd != -99) {
                        SelectedEndStation = Math.min(CurrentTransectEnd, Math.max(CurrentResEnd, CurrentBoreholeEnd));
                    } else if (CurrentResEnd != -99) {
                        SelectedEndStation = Math.min(CurrentTransectEnd, CurrentResEnd);
                    } else if (CurrentBoreholeEnd != -99) {
                        SelectedEndStation = Math.min(CurrentTransectEnd, CurrentBoreholeEnd);
                    }

                    document.getElementById("CurrentStationStartVal").value = SelectedStartStation;
                    document.getElementById("CurrentStationEndVal").value = SelectedEndStation;

                    //elevation
                    var CurrentMaxElev = document.getElementById("CurrentMaxElev").value;
                    var CurrentMinElev = document.getElementById("CurrentMinElev").value;
                    var CurrentBoreholeMaxElev = document.getElementById("CurrentBoreholeMaxElev").value;
                    var CurrentBoreholeMinElev = document.getElementById("CurrentBoreholeMinElev").value;

                    if (CurrentBoreholeMaxElev != -99) {
                        document.getElementById("MaxElevation").value = CurrentBoreholeMaxElev;
                    } else {
                        document.getElementById("MaxElevation").value = CurrentMaxElev;
                    }
                    if (CurrentBoreholeMinElev != -99) {
                        document.getElementById("MinElevation").value = CurrentBoreholeMinElev;
                    } else {
                        document.getElementById("MinElevation").value = CurrentMinElev;
                    }


                    PlotTransect_Full();
                } else if (RezViz == "1") {
                    //min and max should be set by elevation and resisitivity only
                    SetCurrentResisitivityStations();
                    var CurrentResStart = document.getElementById("CurrentResistivityStartStation").value;
                    var CurrentResEnd = document.getElementById("CurrentResistivityEndStation").value;
                    var CurrentTransectStart = document.getElementById("CurrentMinStation").value;
                    var CurrentTransectEnd = document.getElementById("CurrentMaxStation").value;

                    if (CurrentResStart != -99) {
                        document.getElementById("CurrentStationStartVal").value = Math.max(CurrentResStart, CurrentTransectStart);
                    } else {
                        document.getElementById("CurrentStationStartVal").value = document.getElementById("CurrentMinStation").value;
                    }
                    if (CurrentResEnd != -99) {
                        document.getElementById("CurrentStationEndVal").value = Math.min(CurrentResEnd, CurrentTransectEnd);
                    } else {
                        document.getElementById("CurrentStationEndVal").value = document.getElementById("CurrentMaxStation").value;
                    }

                    document.getElementById("MinElevation").value = document.getElementById("CurrentMinElev").value;
                    document.getElementById("MaxElevation").value = document.getElementById("CurrentMaxElev").value;

                    PlotTransect_Resistivity();
                } else {
                    //min and max should be set by elevation only
                    document.getElementById("CurrentStationStartVal").value = document.getElementById("CurrentMinStation").value;
                    document.getElementById("CurrentStationEndVal").value = document.getElementById("CurrentMaxStation").value;
                    document.getElementById("MinElevation").value = document.getElementById("CurrentMinElev").value;
                    document.getElementById("MaxElevation").value = document.getElementById("CurrentMaxElev").value;
                    PlotTransect_ElevationOnly();
                }

            }

            function PlotTransect_ElevationOnly() {

                //disable drawing if it is enabled
                $("#CurrentDrawType").val("None").change();

                //update the title.
                var Tname = document.getElementById("CurrentTransectName").value;
                document.getElementById("TransectPlotTitle").innerHTML = "<h2>" + Tname + "</h2>";

                var $modalOverlay = $('#modalOverlay');
                $modalOverlay.stop().fadeTo(500,1);

                var DesiredStationStart = $("#CurrentStationStartVal").val();
                var DesiredStationEnd = $("#CurrentStationEndVal").val();
                ShowTransectElevation(DesiredStationStart, DesiredStationEnd);

            }

            function PlotTransect_Resistivity() {

                document.getElementById("ResistivityVisible").value = "1";


                //disable drawing if it is enabled
                $("#CurrentDrawType").val("None").change();

                //update the title.
                document.getElementById("TransectPlotTitle").innerHTML = "<h2> " + document.getElementById("CurrentTransectName").value + " </h2>";

                var $modalOverlay = $('#modalOverlay');
                $modalOverlay.stop().fadeTo(500,1);

                var DesiredStationStart = $("#CurrentStationStartVal").val();
                var DesiredStationEnd = $("#CurrentStationEndVal").val();

                ShowTransectElevation(DesiredStationStart, DesiredStationEnd);
                ShowResistivity(DesiredStationStart, DesiredStationEnd);

            }

            function HandleOpen3DPlotter () {

                HandleToolVisibility("Plot3D");
                Open3DPlotter();
                Refresh3DPlot();

            }

            function Open3DPlotter () {

                //disable drawing if it is enabled
                $("#CurrentDrawType").val("None").change();

                //update the title.
                //document.getElementById("TransectPlotTitle").innerHTML = "<h2>Transect 3</h2>";

                var $modalOverlay = $('#modalOverlay');
                $modalOverlay.stop().fadeTo(500,1);

            }



            function Refresh3DPlot() {





                //show a SceneJS view of the assessment area with data collected so far and
                //indicators of which section of the site is well studied
                var scene = SceneJS.createScene({

                    canvasId: "Plot3DCanvas",

                    nodes:[
                        {

                            type:"cameras/orbit",
                            yaw: 30,
                            pitch: -30,
                            zoom: 200,
                            zoomSensistivity:10.0,

                            nodes:[
                                {
                                    type: "material",
                                    color:{r:0.6, g:0.6, b:0.6},
                                    nodes: [
                                        {
                                            type: "translate",
                                            x: -10.0,
                                            y: 0.0,
                                            z: -1.0,
                                            color:{r:0.6, g:0.6, b:0.6},
                                            nodes: [
                                                {
                                                    type:"geometry/cylinder",
                                                    radiusTop:5, // Default 20
                                                    radiusBottom:5, // Default 20
                                                    height:100, // Default 100
                                                    radialSegments:20, // Default 8
                                                    heightSegments:60, // Default 1
                                                    openEnded:false // Default false

                                                }
                                            ]
                                        },
                                        {
                                            type: "translate",
                                            x: 0.0,
                                            y: 0.0,
                                            z: -1.0,
                                            color:{r:0.9, g:0.1, b:0.1},
                                            nodes: [
                                                {
                                                    type:"geometry/cylinder",
                                                    radiusTop:5, // Default 20
                                                    radiusBottom:5, // Default 20
                                                    height:1, // Default 100
                                                    radialSegments:20, // Default 8
                                                    heightSegments:60, // Default 1
                                                    openEnded:false // Default false
                                                }
                                            ]
                                        }

                                    ]
                                }
                            ]
                        }


                    ]
                });


            }

            function UploadResistivityPlot(theTransectName) {

                document.getElementById("CurrentTransectName").value = theTransectName;

                //populate the transects with borehole data
                HandleToolVisibility("UploadImage");
                OpenImporter();


            }


            function UploadSelectedPlotAndAddtoDatabase() {

                var ShowWait = true;

                var theTransectName =  document.getElementById("CurrentTransectName").value;
                var theStartStation = document.getElementById("StartStation").value;
                var theEndStation = document.getElementById("EndStation").value;


                var formData = new FormData();
                var totalFiles = document.getElementById("imageUploadForm").files.length;
                for (var i = 0; i < totalFiles; i++)
                {
                    var file = document.getElementById("imageUploadForm").files[i];

                    formData.append("imageUploadForm", file);
                }

                if (ShowWait){
                    show('loading',  true);
                }

                formData.append("theTransectName", document.getElementById("CurrentTransectName").value);
                formData.append("StartStation", theStartStation);
                formData.append("EndStation", theEndStation);

                $.ajax({
                    type: "POST",
                    url: '/Wizard/Upload',
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function (response) {
                        show('loading', false);
                        alert('Image Uploaded.');
                        UpdateAssessmentInDB(false);
                    },
                    error: function (error) {
                        show('loading', false);
                        alert("Error uploading image.");
                    }
                });

            }


            function HandleDeleteTransect(theTransectName) {


                if (confirm('Are you sure you want to delete transect: ' + theTransectName + '?')) {
                    //set the current transect id
                    document.getElementById("CurrentTransectName").value = theTransectName.trim();


                    //adjust the transect blobs to remove the transect
                    var theTransectProps = document.getElementById("TransectProps").value.split(";");
                    var theTransectBlob = document.getElementById("TransectBlob").value.split(";");
                    var theTransectElevs = document.getElementById("TransectElevs").value.split(";");

                    var newTransectProps = "";
                    var newTransectBlob = "";

                    for (var i = 0; i < theTransectProps.length; i++) {
                        var TProp = theTransectProps[i].split(",");
                        var thisTName = TProp[0];
                        if (thisTName != theTransectName) {
                            newTransectProps = newTransectProps + theTransectProps[i] + ";";
                            newTransectBlob = newTransectBlob + theTransectBlob[i] + ";";
                        }
                    }

                    newTransectProps = newTransectProps.substr(1, newTransectProps.length-2);
                    document.getElementById("TransectProps").value = newTransectProps.trim();

                    newTransectBlob = newTransectBlob.substr(1, newTransectBlob.length-2);
                    document.getElementById("TransectBlob").value = newTransectBlob.trim();

                    //now do an ajax call to update the database.
                    UpdateAssessmentInDB(true);

                    MapTransects();

                    LoadTransects("Basic", "TransectTable1");

                } else {
                    // Do nothing!
                }



            }


            function HandleOpenPlotter_ElevationOnly(theTransectName) {

                //set the current transect id
                document.getElementById("CurrentTransectName").value = theTransectName.trim();

                HandleToolVisibility("BoreholeChart");
                InitiateTransectValueFields();
                OpenPlotter();
                RefreshPlots();

            }

            function HandleToolVisibility(DesiredTool) {

                var AssessmentMain = document.getElementById("AssessmentResultsMain");
                AssessmentMain.style.visibility = 'hidden';

                var UploadDiv = document.getElementById("UploadImageDiv");
                UploadDiv.style.visibility = 'hidden';

                var ImportDiv = document.getElementById("ImportBoreholeDataDiv");
                ImportDiv.style.visibility = 'hidden';

                var AssessmentSummary = document.getElementById("AssessmentResultsSummary");
                AssessmentSummary.style.visibility = 'hidden';

                var AssessmentDiv = document.getElementById("AssessmentResultsDiv");
                AssessmentDiv.style.visibility = 'hidden';

                var FoundationTypeDiv = document.getElementById("FoundationTypeResults");
                FoundationTypeDiv.style.visibility = 'hidden';

                var BoreholeChartDiv = document.getElementById("BoreholeChart");
                BoreholeChartDiv.style.visibility = 'hidden';

                var Plot3DDiv = document.getElementById("Plot3DDiv");
                Plot3DDiv.style.visibility = 'hidden';

                if (DesiredTool == "AssessmentResults") {
                    AssessmentDiv.style.visibility = 'visible';
                } else if (DesiredTool == "FoundationTypeResults") {
                    FoundationTypeDiv.style.visibility = 'visible';
                } else if (DesiredTool == "BoreholeChart") {
                    BoreholeChartDiv.style.visibility = 'visible';
                } else if (DesiredTool == "Plot3D") {
                    Plot3DDiv.style.visibility = 'visible';
                } else if (DesiredTool == "ImportBHData") {
                    ImportDiv.style.visibility = 'visible';
                } else if (DesiredTool == "UploadImage") {
                    UploadDiv.style.visibility = 'visible';
                }

            }

            function InitiateTransectValueFields() {

                var theTLength = 0;
                var theTransectProps = document.getElementById("TransectProps").value.split(";");

                var TargetTransectName =  document.getElementById("CurrentTransectName").value;

                for (var i = 1; i < theTransectProps.length; i++) {
                    var thisTransectProps = theTransectProps[i].split(",");
                    var thisTransectName = thisTransectProps[0].trim();
                    var thisTransectLength = Math.floor(thisTransectProps[1].trim());
                    if (thisTransectName == TargetTransectName) {
                        theTLength = thisTransectLength;
                        break;
                    }
                }

                document.getElementById("StationStart").value = "0";
                document.getElementById("StationEnd").value =  theTLength;
                document.getElementById("MaxElevation").value = "200";
                document.getElementById("MinElevation").value =  "100";

                document.getElementById("CurrentStationStartVal").value = "0";
                document.getElementById("CurrentStationEndVal").value =  theTLength;

            }

            function HandleOpenPlotter_Resistivity (theTransectName) {

                //set the current transect id
                document.getElementById("CurrentTransectName").value = theTransectName.trim();

                HandleToolVisibility("BoreholeChart");
                InitiateTransectValueFields();

                document.getElementById("ResistivityVisible").value = "1";

                OpenPlotter();
                RefreshPlots();
            }

            function HandleOpenPlotter_Full (theTransectName) {

                //set the current transect id
                document.getElementById("CurrentTransectName").value = theTransectName.trim();

                HandleToolVisibility("BoreholeChart");
                InitiateTransectValueFields();

                document.getElementById("BoreholeChartsVisible").value = "1";

                OpenPlotter();
                RefreshPlots();
            }

            function OpenPlotter () {

                //disable drawing if it is enabled
                $("#CurrentDrawType").val("None").change();


                //update the title.
                var CurrentTransectName =  document.getElementById("CurrentTransectName").value;
                document.getElementById("TransectPlotTitle").innerHTML = "<h2>" + CurrentTransectName  + "</h2>";

                var $modalOverlay = $('#modalOverlay');
                $modalOverlay.stop().fadeTo(500,1);

            }

            function PlotTransect_Full() {

                var DesiredStationStart = $("#CurrentStationStartVal").val();
                var DesiredStationEnd = $("#CurrentStationEndVal").val();

                ShowTransectElevation(DesiredStationStart, DesiredStationEnd);
                ShowResistivity(DesiredStationStart, DesiredStationEnd);
                ShowBoreholes(DesiredStationStart, DesiredStationEnd);

            }

            function ShowTransectElevation(DesiredStationStart, DesiredStationEnd) {

                var currentStartStation = document.getElementById("CurrentStationStartVal").value
                var currentEndStation = document.getElementById("CurrentStationEndVal").value
                var currentMinElev = document.getElementById("MinElevation").value
                var currentMaxElev = document.getElementById("MaxElevation").value

                

                var MaxElev = GetMaxElevationOfCurrentTransect();
                var MinElev = GetMinElevationOfCurrentTransect();

                var maxElevToUse = Math.max(currentMaxElev, MaxElev);
                var minElevToUse = Math.min(currentMinElev, MinElev);
                //evaluate chart limits


                if (MaxElev != -999 && MinElev != -999) {
                    var theInterval = currentEndStation / 20;

                    chart = new CanvasJS.Chart("TransectElevationDiv",
                      {
                          title: {
                              text: "Elevation"
                          },
                          axisX: {
                              labelMaxWidth: 70,
                              interval: theInterval,
                              maximum: currentEndStation,
                              minimum: currentStartStation
                          },
                          axisY: {
                              maximum: maxElevToUse,
                              minimum: minElevToUse
                          },
                          toolTip: {
                              content: "Station {x}, Elev {y}"
                          },
                          dataPointMaxWidth: 10,
                          data: [

                          ]

                      });

                        UpdateElevationData(chart, "Line");
                        chart.render();
                } else {
                    window.alert("Unable to pull elevation data from USGS National Elevation Dataset for this transect.  Note that you can still proceed with your assessment.  The elevation data is used as a placeholder until you do field data collection.  To proceed, just close the transect window and continue to resistivity data collection in the next step.");
                }

                



            }

            function GetMaxElevationOfCurrentTransect() {

                var MaxStation = -1000000;
                var MinStation = 1000000;
                var MinElev = 100000000;
                var MaxElev = -100000000;

                var model = @Html.Raw(Json.Encode(Model));

                var TargetTransect = document.getElementById("CurrentTransectName").value;

                var theTLength = 0;
                var theTransectProps = document.getElementById("TransectProps").value.split(";");
                var theTransectBlob = document.getElementById("TransectBlob").value.split(";");
                var theTransectElevs = document.getElementById("TransectElevs").value.split(";");

                var wgs84Sphere = new ol.Sphere(6378137);

                for (var i = 0; i < theTransectProps.length; i++) {
                    if (theTransectProps[i] != "") {
                        var thisTransectProps = theTransectProps[i].split(",");
                        var thisTransectName = thisTransectProps[0].trim();
                        var thisTransectLength = Math.floor(thisTransectProps[1].trim());
                        if (thisTransectName == TargetTransect) {
                            //get the points in the transect
                            var thePtData = [];
                            var thePoints = theTransectBlob[i].split(",");
                            var DistFromStart = 0;

                            var LastX = 0;
                            var LastY = 0;

                            var QualifyingPointElevFound = false;

                            for (var j = 1; j < thePoints.length; j++) {
                                thisX = thePoints[j-1];
                                thisY = thePoints[j];

                                //find the elevation of the point from the transectelevs list
                                var MinDist = 100000;
                                var MinDistElev = -999;
                                for (var k = 1; k < theTransectElevs.length; k++) {
                                    var thatPt = theTransectElevs[k].split(",");
                                    var thatX = Number(thatPt[0]);
                                    var thatY = Number(thatPt[1]);
                                    var thatElev = Number(thatPt[2]);
                                    var thatDist = Math.pow(thatX - thisX, 2) + Math.pow(thatY - thisY, 2);
                                    thatDist = Math.pow(thatDist, 0.5);
                                    if (thatDist < MinDist) {
                                        MinDist = thatDist;
                                        MinDistElev = thatElev;
                                    }
                                }

                                if (MinDist < 0.001) {
                                    QualifyingPointElevFound = true;
                                    if (DistFromStart > MaxStation) {
                                        MaxStation = DistFromStart;
                                    }
                                    if (MinDistElev > MaxElev) {
                                        MaxElev = MinDistElev;
                                    }
                                    if (MinDistElev < MinElev) {
                                        MinElev = MinDistElev;
                                    }
                                }
 
                                j= j +1;
                            }

                            break;
                        }

                    }
                    
                }

                if (MaxElev != -100000000) {
                    return MaxElev;
                } else {
                    return -999;
                }

            }

        function GetMinElevationOfCurrentTransect() {

            var MaxStation = -1000000;
            var MinStation = 1000000;
            var MinElev = 100000000;
            var MaxElev = -100000000;

            var model = @Html.Raw(Json.Encode(Model));

            var TargetTransect = document.getElementById("CurrentTransectName").value;

            var theTLength = 0;
            var theTransectProps = document.getElementById("TransectProps").value.split(";");
            var theTransectBlob = document.getElementById("TransectBlob").value.split(";");
            var theTransectElevs = document.getElementById("TransectElevs").value.split(";");

            var wgs84Sphere = new ol.Sphere(6378137);

            for (var i = 0; i < theTransectProps.length; i++) {
                if (theTransectProps[i] != "") {
                    var thisTransectProps = theTransectProps[i].split(",");
                    var thisTransectName = thisTransectProps[0].trim();
                    var thisTransectLength = Math.floor(thisTransectProps[1].trim());
                    if (thisTransectName == TargetTransect) {
                        //get the points in the transect
                        var thePtData = [];
                        var thePoints = theTransectBlob[i].split(",");
                        var DistFromStart = 0;

                        var LastX = 0;
                        var LastY = 0;

                        var QualifyingPointElevFound = false;

                        for (var j = 1; j < thePoints.length; j++) {
                            thisX = thePoints[j-1];
                            thisY = thePoints[j];

                            //find the elevation of the point from the transectelevs list
                            var MinDist = 100000;
                            var MinDistElev = -999;
                            for (var k = 1; k < theTransectElevs.length; k++) {
                                var thatPt = theTransectElevs[k].split(",");
                                var thatX = Number(thatPt[0]);
                                var thatY = Number(thatPt[1]);
                                var thatElev = Number(thatPt[2]);
                                var thatDist = Math.pow(thatX - thisX, 2) + Math.pow(thatY - thisY, 2);
                                thatDist = Math.pow(thatDist, 0.5);
                                if (thatDist < MinDist) {
                                    MinDist = thatDist;
                                    MinDistElev = thatElev;
                                }
                            }

                            if (MinDist < 0.001) {
                                QualifyingPointElevFound = true;
                                if (DistFromStart > MaxStation) {
                                    MaxStation = DistFromStart;
                                }
                                if (MinDistElev > MaxElev) {
                                    MaxElev = MinDistElev;
                                }
                                if (MinDistElev < MinElev) {
                                    MinElev = MinDistElev;
                                }
                            }
 
                            j= j +1;
                        }

                        break;
                    }
                }
            }

            if (MinElev != 100000000) {
                return MinElev;
            } else {
                return -999;
            }

        }



            function UpdateElevationData (theChart, targetDataType) {

                theChart.data

                var MaxStation = -1000000;
                var MinStation = 1000000;
                var MinElev = 100000000;
                var MaxElev = -100000000;

                var model = @Html.Raw(Json.Encode(Model));

                var TargetTransect = document.getElementById("CurrentTransectName").value;

                var theTLength = 0;
                var theTransectProps = document.getElementById("TransectProps").value.split(";");
                var theTransectBlob = document.getElementById("TransectBlob").value.split(";");
                var theTransectElevs = document.getElementById("TransectElevs").value.split(";");

                var wgs84Sphere = new ol.Sphere(6378137);

                for (var i = 0; i < theTransectProps.length; i++) {
                    if (theTransectProps[i] != "") {
                        var thisTransectProps = theTransectProps[i].split(",");
                        var thisTransectName = thisTransectProps[0].trim();
                        var thisTransectLength = Math.floor(thisTransectProps[1].trim());
                        if (thisTransectName == TargetTransect) {
                            //get the points in the transect
                            var thePtData = [];
                            var thePoints = theTransectBlob[i].split(",");
                            var DistFromStart = 0;

                            var LastX = 0;
                            var LastY = 0;

                            var QualifyingPointElevFound = false;

                            for (var j = 1; j < thePoints.length; j++) {
                                thisX = thePoints[j-1];
                                thisY = thePoints[j];

                                //find the distance along the transect
                                if (j > 1) {
                                    //find the distance from point to point
                                    var thispointgeom = new ol.geom.Point([thisX, thisY]);
                                    var lastpointgeom = new ol.geom.Point([LastX, LastY]);
                                    var thiscoord = thispointgeom.getCoordinates();
                                    var lastcoord = lastpointgeom.getCoordinates();
                                    DistFromStart = DistFromStart + wgs84Sphere.haversineDistance(lastcoord, thiscoord);
                                    LastX = thisX;
                                    LastY = thisY;
                                } else {
                                    DistFromStart = 0;
                                    LastX = thisX;
                                    LastY = thisY;
                                }

                                //find the elevation of the point from the transectelevs list
                                var MinDist = 100000;
                                var MinDistElev = -999;
                                for (var k = 1; k < theTransectElevs.length; k++) {
                                    var thatPt = theTransectElevs[k].split(",");
                                    var thatX = Number(thatPt[0]);
                                    var thatY = Number(thatPt[1]);
                                    var thatElev = Number(thatPt[2]);
                                    var thatDist = Math.pow(thatX - thisX, 2) + Math.pow(thatY - thisY, 2);
                                    thatDist = Math.pow(thatDist, 0.5);
                                    if (thatDist < MinDist) {
                                        MinDist = thatDist;
                                        MinDistElev = thatElev;
                                    }
                                }

                                if (MinDist < 0.001) {
                                    QualifyingPointElevFound = true;
                                    if (DistFromStart > MaxStation) {
                                        MaxStation = DistFromStart;
                                    }
                                    if (MinDistElev > MaxElev) {
                                        MaxElev = MinDistElev;
                                    }
                                    if (MinDistElev < MinElev) {
                                        MinElev = MinDistElev;
                                    }

                                    thePtData.push({x: DistFromStart, y: MinDistElev});
                                }
 
                                j= j +1;
                            }

                            theTLength = thisTransectLength;
                            MinStation = 0;
                            //load up the chart data
                            var newSeries = {
                                type: "line",
                                dataPoints: thePtData
                            };

                            //var newSeries = {
                            //    type: "line",
                            //    dataPoints: [{x: 0, y:132}, {x: theTLength, y:134}]
                            //};

                            //update the global exten coordinates
                       
                            document.getElementById("CurrentMaxStation").value = MaxStation;
                            document.getElementById("CurrentMinStation").value = MinStation;

                            if (QualifyingPointElevFound == true) {
                                document.getElementById("CurrentMaxElev").value = MaxElev * 1.05;
                                document.getElementById("CurrentMinElev").value = MinElev * 0.95;
                            } else {
                                document.getElementById("CurrentMaxElev").value = 0;
                                document.getElementById("CurrentMinElev").value = 0;
                            }

                            theChart.options.data.push(newSeries);
                            break;

                    }
                    
                    }
                }

                //also do any boreholes that are in the current dropdown
                var BHDropDown = document.getElementById("Boreholes");
                for(var i=0; i < BHDropDown.length; i++)
                {
                    var thisval = Number(BHDropDown.options[i].value);
                    var newBHSeries = {
                        type: "rangeColumn",
                        xvaluetype: "number",
                        dataPointMaxWidth:10,
                        dataPoints: [{x: thisval, y: [MinElev, MaxElev], color: "red"}]
                    };
                    theChart.options.data.push(newBHSeries);
                }

                theChart.render();


            }

        function MoveLeftSideLeft() {
            //move the left side of the resistivity plot to the left
            var currentImage = document.getElementById("CurrentResImage");

            if (currentImage != null) {

                var CurrentLeft = Number(currentImage.style.left.replace("px", ""));
                var CurrentWidth = Number(currentImage.style.width.replace("px", ""));

                currentImage.style.left = (CurrentLeft-10).toString() + "px";
                currentImage.style.width = (CurrentWidth + 10).toString() + "px";
                currentImage.style.height = "100%";
                currentImage.style.position = "absolute";
            }

        }

        function MoveLeftSideRight() {
            //move the left side of the resistivity plot to the left
            var currentImage = document.getElementById("CurrentResImage");

            if (currentImage != null) {

                var CurrentLeft = Number(currentImage.style.left.replace("px", ""));
                var CurrentWidth = Number(currentImage.style.width.replace("px", ""));

                currentImage.style.left = (CurrentLeft+10).toString() + "px";
                currentImage.style.width = (CurrentWidth - 10).toString() + "px";
                currentImage.style.height = "100%";
                currentImage.style.position = "absolute";
            }

        }

        function MoveRightSideLeft() {
            //move the left side of the resistivity plot to the left
            var currentImage = document.getElementById("CurrentResImage");

            if (currentImage != null) {

                var CurrentLeft = Number(currentImage.style.left.replace("px", ""));
                var CurrentWidth = Number(currentImage.style.width.replace("px", ""));

                currentImage.style.width = (CurrentWidth - 10).toString() + "px";
                currentImage.style.height = "100%";
                currentImage.style.position = "absolute";
            }

        }

        function MoveRightSideRight() {
            //move the left side of the resistivity plot to the left
            var currentImage = document.getElementById("CurrentResImage");

            if (currentImage != null) {

                var CurrentLeft = Number(currentImage.style.left.replace("px", ""));
                var CurrentWidth = Number(currentImage.style.width.replace("px", ""));

                currentImage.style.width = (CurrentWidth + 10).toString() + "px";
                currentImage.style.height = "100%";
                currentImage.style.position = "absolute";
            }

        }

        function SetCurrentBoreholeStationsElevations() {
            var CurModel = document.getElementById("CurrentModel").value;

            var model = null;

            if (CurModel != null && CurModel != "") {
                model = JSON.parse(CurModel);
            } else {
                model =  @Html.Raw(Json.Encode(Model));
            }

            var TargetTransect = document.getElementById("CurrentTransectName").value.trim();

            if (model.Transects != null) {
                for (var i = 0; i < model.Transects.length; i++) {
                    var thisTransect = model.Transects[i];
                    if (thisTransect.TransectName == TargetTransect) {

                        if (thisTransect.Boreholes != null && thisTransect.Boreholes.length > 0) {

                            var maxStation = -9999999;
                            var minStation = 999999;
                            var maxElev = -999999;
                            var minElev = 999999;

                            for (var j = 0; j < thisTransect.Boreholes.length; j++) {
                                var thisBH = thisTransect.Boreholes[j];
                                var thisStation = thisBH.Station;
                                if (thisStation > maxStation) {
                                    maxStation = thisStation;
                                }
                                if (thisStation < minStation) {
                                    minStation = thisStation;
                                }
                                var BHElev = thisBH.Elevation;

                                for (k = 0; k < thisBH.BHSamples.length; k++) {
                                    var thisBHS = thisBH.BHSamples[k];
                                    var thisElev = BHElev - thisBHS.Depth/100;
                                    if (thisElev > maxElev) {
                                        maxElev = thisElev;
                                    }
                                    if (thisElev < minElev) {
                                        minElev = thisElev;
                                    }
                                }


                            }

                            document.getElementById("CurrentBoreholeEndStation").value = maxStation;
                            document.getElementById("CurrentBoreholeStartStation").value = minStation;
                            document.getElementById("CurrentBoreholeMaxElev").value = maxElev;
                            document.getElementById("CurrentBoreholeMinElev").value = minElev;
                            return;

                        }
                    }
                }

            }
        }

        function SetCurrentResisitivityStations() {

            var CurModel = document.getElementById("CurrentModel").value;

            var model = null;

            if (CurModel != null && CurModel != "") {
                model = JSON.parse(CurModel);
            } else {
                model =  @Html.Raw(Json.Encode(Model));
            }

            var TargetTransect = document.getElementById("CurrentTransectName").value.trim();

            if (model.Transects != null) {
                for (var i = 0; i < model.Transects.length; i++) {
                    var thisTransect = model.Transects[i];
                    if (thisTransect.TransectName == TargetTransect) {

                        if (thisTransect.TransectImages != null && thisTransect.TransectImages.length > 0) {

                            document.getElementById("CurrentResistivityStartStation").value = thisTransect.TransectImages[0].StartStation;
                            document.getElementById("CurrentResistivityEndStation").value = thisTransect.TransectImages[0].EndStation;
                            return;
                        }

                    }
                }

            }

        }


            function ShowResistivity(DesiredStationStart, DesiredStationEnd) {

                var CurModel = document.getElementById("CurrentModel").value;

                var model = null;

                if (CurModel != null && CurModel != "") {
                    model = JSON.parse(CurModel);
                } else {
                    model =  @Html.Raw(Json.Encode(Model));
                }

                var TargetTransect = document.getElementById("CurrentTransectName").value.trim();

                //find the image data for this transect
                $("#ResistivityDataHelp").hide();

                var ResistivityPlotDiv = document.getElementById("ResistivityImageContainer");

                var ContainerWidth = ResistivityPlotDiv.clientWidth;

                var elem = document.createElement("img");
                elem.setAttribute("id", "CurrentResImage");
                //elem.src = "../../Images/T3_Resistivity4.png";
                //elem.src = "data:image/png;base64," + TargetTransect.TransectImage[0].ImageData;

                if (model.Transects != null) {
                    for (var i = 0; i < model.Transects.length; i++) {
                        var thisTransect = model.Transects[i];
                        if (thisTransect.TransectName == TargetTransect) {

                            if (thisTransect.TransectImages != null && thisTransect.TransectImages.length > 0) {

                                elem.src = "../../Images/" + thisTransect.TransectImages[0].TransectImageName;

                                while (ResistivityPlotDiv.firstChild) {
                                    ResistivityPlotDiv.removeChild(ResistivityPlotDiv.firstChild);
                                }

                                ResistivityPlotDiv.appendChild(elem);


                                var ResistivityStart = thisTransect.TransectImages[0].StartStation;
                                var ResistivityEnd = thisTransect.TransectImages[0].EndStation;
                                var TransectStart = DesiredStationStart;
                                var TransectEnd = DesiredStationEnd;
                                var MarginInflator = 1.00;

                                var WidthRatio = (ResistivityEnd - ResistivityStart) / (TransectEnd - TransectStart)
                                var thisleftPx = Math.floor(ContainerWidth * (ResistivityStart - TransectStart)/(TransectEnd - TransectStart));
                                var thisWidth = Math.floor(MarginInflator * WidthRatio * ContainerWidth);
                                thisleftPx = Math.floor(thisleftPx - thisWidth * (MarginInflator-1));


                                var LeftString = thisleftPx + "px";
                                var widthstring = thisWidth + "px";

                                elem.style.left = LeftString;
                                elem.style.width = widthstring;
                                elem.style.height = "100%";
                                elem.style.position = "absolute";
                            }



                            //add the fine tuning buttons for the image

                        }
                    }

                }



            }

            function ShowBoreholes(DesiredStationStart, DesiredStationEnd) {

                HandleToolVisibility("BoreholeChart");
                ChartSoilTypes();
                ChartBHStability();
                UpdateTransectConclusions();


            }

            var StationStartField = document.getElementById('StationStart');

            StationStartField.onchange = function (e) {
                document.getElementById("CurrentStationStartVal").value = document.getElementById("StationStart").value;

            };

            var StationEndField = document.getElementById('StationEnd');

            StationEndField.onchange = function (e) {
                document.getElementById("CurrentStationEndVal").value = document.getElementById("StationEnd").value;

            };


            function UpdateTransectConclusions() {

                //    var TransectConclusionsParagraph = document.getElementById("TransectConclusions");
                //    TransectConclusionsParagraph.innerHTML = "The borehole data provided indicates that there is a potentially stable layer approximately 2m below the surface of this transect.  This layer could act as support for a piling based foundation for the structure you'd like to build.  An elevated structure is recommended with pilings anchored to the stable layer.";
            }


            var BHDPS = new Array();

            function UpdateBoreholeData (theChart, targetDataType) {

                var CurModel = document.getElementById("CurrentModel").value;

                var model = null;

                if (CurModel != null && CurModel != "") {
                    model = JSON.parse(CurModel);
                } else {
                    model =  @Html.Raw(Json.Encode(Model));
                }


                var TargetTransect = document.getElementById("CurrentTransectName").value;

                for (var i = 0; i < model.Boreholes.length; i++) {
                    var thisBorehole = model.Boreholes[i];


                    if (thisBorehole.Station > 0) {

                    //if (isProposedBorehole(thisBorehole.Station)) {


                        if (thisBorehole.TransectName == TargetTransect) {

                            //add the positive side of the stacked bar chart
                            var StartBar = Math.min(parseInt(thisBorehole.Elevation * 100 / 10, 10), thisBorehole.BHSamples.length-1);

                            //there may be a spacer bar at the bottom if the very lowest value is above zero
                            var TotalDepth = thisBorehole.BHSamples.length * 10;
                            var SpacerDepth = thisBorehole.Elevation - TotalDepth/100;
                            if (SpacerDepth > 0) {
                                var newSeries = {
                                    type: "stackedColumn",
                                    dataPoints: [{x: thisBorehole.Station, y: SpacerDepth, label: "", color: "transparent"}]
                                };
                                theChart.options.data.push(newSeries);
                            }

                            for (var j = StartBar; j >= 0; j--) {
                                var thisBHS = thisBorehole.BHSamples[j];
                                var LayerDepth = 10/100;
                                for (var k = j; k > 0; k--) {
                                    var thatBHS = thisBorehole.BHSamples[k];
                                    if (thatBHS.Material !== thisBHS.Material) {
                                        break;
                                    } else {
                                        LayerDepth = LayerDepth + 10/100;
                                    }
                                }

                                j = k;

                                var theColor;

                                if (targetDataType == "Stability") {

                                    if (thisBHS.Stability == 1) {
                                        theColor = "Red";
                                    } else if (thisBHS.Stability == 2) {
                                        theColor = "Orange";
                                    } else if (thisBHS.Stability == 3) {
                                        theColor = "Yellow";
                                    } else if (thisBHS.Stability == 4) {
                                        theColor = "Cyan";
                                    } else if (thisBHS.Stability == 5) {
                                        theColor = "Green";
                                    } else  {
                                        theColor = "Gray";
                                    }

                                    var isFrozen = "UnFrozen";
                                    if (thisBHS.PF_code == "1") {
                                        isFrozen = "Frozen";
                                    }
                                    var thisLabel = "Stability: " + thisBHS.Stability  + "; " + thisBHS.Material + "; " + isFrozen + "; GMC:" + thisBHS.GMC;


                                    var newSeries = {
                                        type: "stackedColumn",
                                        xvaluetype: "number",
                                        dataPoints: [{x: thisBorehole.Station, y: LayerDepth, indexLabel: thisLabel, color: theColor, indexLabelFormatter: function(e) {return ""}}]

                                    };
                                    theChart.options.data.push(newSeries);


                                } else {
                                    if (thisBHS.Material == "SW") {
                                        theColor = "Indigo";
                                    } else if (thisBHS.Material == "SP") {
                                        theColor = "Red";
                                    } else if (thisBHS.Material == "SM") {
                                        theColor = "Yellow";
                                    } else if (thisBHS.Material == "ML") {
                                        theColor = "Gray";
                                    } else if (thisBHS.Material == "Pt") {
                                        theColor = "Green";
                                    } else if (thisBHS.Material == "GW") {
                                        theColor = "Brown";
                                    } else if (thisBHS.Material == "ICE") {
                                        theColor = "Blue";
                                    } else  {
                                        theColor = "Red";
                                    }

                                    var newSeries = {
                                        type: "stackedColumn",
                                        xvaluetype: "number",
                                        dataPoints: [{x: thisBorehole.Station, y: LayerDepth, indexLabel: thisBHS.Material, color: theColor, indexLabelFormatter: function(e) {return ""}}]

                                    };
                                    theChart.options.data.push(newSeries);
                                }
                            }


                            //under zero
                            for (var j = StartBar+1; j < thisBorehole.BHSamples.length; j++) {
                                var thisBHS = thisBorehole.BHSamples[j];
                                var LayerDepth = 10/100;
                                for (var k = j+1; k < thisBorehole.BHSamples.length; k++) {
                                    var thatBHS = thisBorehole.BHSamples[k];
                                    if (thatBHS.Material !== thisBHS.Material) {
                                        break;
                                    } else {
                                        LayerDepth = LayerDepth + 10/100;
                                    }
                                }
                                j = k-1;

                                var theColor;
                                if (thisBHS.Material == "SW") {
                                    theColor = "Indigo";
                                } else if (thisBHS.Material == "SP") {
                                    theColor = "Red";
                                } else if (thisBHS.Material == "SM") {
                                    theColor = "Yellow";
                                } else if (thisBHS.Material == "ML") {
                                    theColor = "Gray";
                                } else if (thisBHS.Material == "Pt") {
                                    theColor = "Green";
                                } else if (thisBHS.Material == "GW") {
                                    theColor = "Brown";
                                } else if (thisBHS.Material == "ICE") {
                                    theColor = "Blue";
                                } else  {
                                    theColor = "Red";
                                }

                                var newSeries = {
                                    type: "stackedColumn",
                                    xvaluetype: "number",
                                    //dataPoints: [{x: thisBorehole.Station, y: [thisBorehole.Elevation-thisBHS.Depth, thisBorehole.Elevation-thisBHS.Depth - 10], label: thisBHS.Material}]
                                    dataPoints: [{x: thisBorehole.Station, y: -LayerDepth, label: thisBHS.Material, color: theColor, indexLabelFormatter: function(e) {return ""}}]

                                };
                                theChart.options.data.push(newSeries);


                            }

                        }
                    }

                }

                theChart.render();

            }

            function UpdateBoreholeChart (targetContainer, targetDataType) {

                var currentStartStation = document.getElementById("CurrentStationStartVal").value
                var currentEndStation = document.getElementById("CurrentStationEndVal").value
                var currentMinEl = document.getElementById("MinElevation").value
                var currentMaxEl = document.getElementById("MaxElevation").value

                var dpMaxWidth = 1000/(currentEndStation- currentStartStation) * 2;

                chart = new CanvasJS.Chart(targetContainer,
                {
                    title: {
                        text: targetDataType
                    },
                    axisX: {
                        labelMaxWidth: 70,
                        interval: 10,
                        maximum: currentEndStation,
                        minimum: currentStartStation
                    },
                    axisY: {
                        maximum: currentMaxEl,
                        minimum: currentMinEl
                    },
                    toolTip: {
                        content: "{indexLabel}"
                    },
                    dataPointMaxWidth: dpMaxWidth,
                    data: [

                    ]
                });

                UpdateBoreholeData(chart, targetDataType);
                chart.render();

            }


            function ShowDesktopAssessmentResults() {


                HandleToolVisibility("AssessmentResults");

                //populate the detail
                document.getElementById("NumTerrainUnits").innerHTML = "<h3>Terrain Units:</h3>";

                document.getElementById("TerrainUnitDescription").innerHTML = document.getElementById("TerrainDescription").value;

                document.getElementById("IceContentPFTitle").innerHTML = "<h3>Ice Content, Permafrost Extent</h3>";

                var StandardDDFDesc = "Development Difficulty summarizes the expected difficulty of developing your structure in the selected site.  It includes material type, ice content, vegetation, required resiliency, and cost as factors.  The table below shows your DDF result.";
                document.getElementById("DDFTitle").innerHTML = "<h3>Development Difficulty Factor</h3>";
                document.getElementById("DDFDescription").innerHTML = StandardDDFDesc;

                //var $modal = $('.modalOverlay');
                //$modal.removeClass('is-inactive');
                //$modal.addClass('is-active');

                var $modalOverlay = $('#modalOverlay');
                $modalOverlay.stop().fadeTo(500,1);

                UpdateDDFChartData();
                UpdateChart("resultsChartContainer");

                //populate the summary
                var CurrentMT = Math.floor(document.getElementById("MT").value);
                var CurrentIC = Math.floor(document.getElementById("IC").value);
                var CurrentV = Math.floor(document.getElementById("V").value);
                var CurrentR = Math.floor(document.getElementById("R").value);
                var CurrentC = Math.floor(document.getElementById("C").value);

                var CurrentMT_ErrorMargin = Math.floor(document.getElementById("MT_ErrorMargin").value);
                var CurrentIC_ErrorMargin = Math.floor(document.getElementById("IC_ErrorMargin").value);
                var CurrentV_ErrorMargin = Math.floor(document.getElementById("V_ErrorMargin").value);
                var CurrentR_ErrorMargin = Math.floor(document.getElementById("R_ErrorMargin").value);
                var CurrentC_ErrorMargin = Math.floor(document.getElementById("C_ErrorMargin").value);

                var totalDDF = CurrentMT + CurrentIC + CurrentV + CurrentR + CurrentC;

                var AssessmentSummary = "A preliminary assessment, based on the publically available data and the information you provided, yields a DDF score of " + totalDDF + ".   This suggests that ";

                if (totalDDF > 35) {
                    AssessmentSummary = AssessmentSummary + "there is a strong likelihood that locating a structure at this site will cause destabilization of the underlying permafrost, and may result in structural failure.  Your two options are to (a) find another site or (b) use a non-standard type of foundation.  The DSS will guide you through the process of obtaining a more detailed site evaluation and selecting a viable foundation type.";
                } else if (totalDDF > 15) {
                    AssessmentSummary = AssessmentSummary + "building at this site might be problematic, but it is difficult to be more certain without additional information.  This means that, to be safe, you are advised to obtain more information that is specific to the building site such as soil cores or geophysical surveys.  The DSS will guide you through this process.  Just hit close and move to the next screen.";
                } else {
                    AssessmentSummary = AssessmentSummary + "there is little danger of significant ground thaw and resulting damage to the structure you intend to locate at this site.";
                }

                //intepret the con list from the conditions list

                var conditionsList = document.getElementById("ConditionList").value;
                conditionsList = conditionsList.split(";");
                var conlist = "";
                var prolist = "";
                for (var i = 0; i < conditionsList.length; i++) {
                    var ConItems = conditionsList[i].split(",");
                    var theCondition = ConItems[0];
                    var ProCon = ConItems[11];
                    if (ProCon == "Con") {
                        conlist = conlist + theCondition + "<br>";
                    } else if (ProCon = "Pro") {
                        prolist = prolist + theCondition + "<br>";
                    }
                }

                //var conlist = document.getElementById("ConList").value;
                //var prolist = document.getElementById("ProList").value;
                //conlist = conlist.split(";").join("<br>");
                //prolist = prolist.split(";").join("<br>");

                AssessmentSummary = AssessmentSummary + "<br><br>" + "<h3>Conditions Increasing Difficulty</h3>" + conlist + "<br><br>" + "<h3>Conditions Decreasing Difficulty</h3>" + prolist;

                document.getElementById("AssessmentResultsSummary").innerHTML = AssessmentSummary;

                showAssessmentSummary();

                //var DDFTableHTML = '<table><tr><td align="Right">Material Type (MT)</td><td>6</td></tr>' +
                //        '<tr><td align="Right">Ice Content (IC)</tdhalign="Right"><td>8</td></tr>' +
                //        '<tr><td align="Right">Vegetation (V)</td><td>7</td></tr>' +
                //        '<tr><td align="Right">Required Resiliency (R)</td><td>6</td></tr>' +
                //        '<tr><td align="Right">Cost (C)</td><td>7</td></tr>' +
                //        '<tr></tr>' +
                //        '<tr><td align="Right">DDF</td><td>34</td></tr>' +
                //        '</table>';

                //document.getElementById("DDFTable").innerHTML = DDFTableHTML;

            }


            var $modalOverlay = $('#modalOverlay');
            var $modal        = $('#modal');
            var $modalClose   = $('.modalClose');
            var $modalOpen    = $('.modalOpen');

            $modalOpen.click(function(){
                $modalOverlay.stop().fadeTo(500,1);
            });

            $modalOverlay.click(function(){
                $modalOverlay.stop().fadeTo(500,0, function(){ $(this).hide(); });
            });


            $modal.click(function( e ) {
                e.stopPropagation();
            });

            $modalClose.click(function(){
                $modalOverlay.click();

                //update the transect and borehole tables depending on which screen is visible
                UpdateProposedBoreholes();
                LoadProposedBoreholes();
            });

            //(function () {
            //    var $modal = $('.modalOverlay'),
            //        openModal = function () {
            //            $modal
            //                .removeClass('is-inactive')
            //                .addClass('is-active');
            //        },
            //        closeModal = function () { //use it wherever you want
            //            $modal
            //               .removeClass('is-active')
            //               .addClass('is-inactive');

            //        },
            //        onDocReady = function () {
            //            $('.opensModal').on('focus', openModal);
            //            $('.closesModal').on('focus', closeModal);
            //        };

            //    $(onDocReady);
            //})();


            $(function () {

                $(".wizard-step:first").fadeIn(); // show first step

                //start at borehole screen
                var theSteps = document.getElementsByName("WS");
                for (var i = 0; i < theSteps.length; i++) {
                    var thisstep = theSteps[i];
                    if (thisstep.id == "WS0") {
                        //$step.hide();
                        //thisstep.show();
                        thisstep.style.display = 'inline';
                        if (document.getElementById('CurrentStep').value == "") {
                            document.getElementById('CurrentStep').value = "WS0";
                        }

                        //return;
                    } else {
                        thisstep.style.display = 'none';
                    }
                }

                // attach backStep button handler
                // hide on first step
                //$("#back-step").hide().click(function () {
                //    var $step = $(".wizard-step:visible"); // get current step
                //    if ($step.prev().hasClass("wizard-step")) { // is there any previous step?
                //        $step.hide().prev().fadeIn();  // show it and hide current step

                //        // disable backstep button?
                //        if (!$step.prev().prev().hasClass("wizard-step")) {
                //            //$("#back-step").hide();
                //        }
                //    }
                //});


                $("#DrawAssessmentArea").click(function () {
                    $("#CurrentDrawType").val("SiteLocation").change();
                });

                $("#DrawNewTransect").click(function () {
                    $("#CurrentDrawType").val("DrawNewTransect").change();
                });

                $("#PlaceBuildingSite").click(function () {
                    //remove any current building sites
                    document.getElementById('BuildingSiteCoordinates').value = "";
                    //DrawSource.clear();
                    $("#CurrentDrawType").val("BuildingSiteLocation").change();
                });


                // attach nextStep button handler
                $("#back-step").click(function () {

                    $("#CurrentDrawType").val("None").change();

                    //figure out navigation going backward
                    var theSteps = document.getElementsByName("WS");
                    var CurrentStep = document.getElementById('CurrentStep').value;

                    var model = @Html.Raw(Json.Encode(Model));

                    var nextStep;
                    if (CurrentStep == "WS1") {
                        nextStep = "WS0";
                    } else if (CurrentStep == "WS1_5") {
                        nextStep = "WS1";
                    } else if (CurrentStep == "WS2" || CurrentStep == "WS1_1" || CurrentStep == "WS1_2" || CurrentStep == "WS1_3") {
                        nextStep = "WS1_5";
                    } else if (CurrentStep == "WS3" || CurrentStep == "WS2_1") {
                        nextStep = "WS2";
                    } else if (CurrentStep == "WS4") {
                        nextStep = "WS3";
                    } else if (CurrentStep == "WS5") {
                        nextStep = "WS4";
                    } else if (CurrentStep == "WS6") {
                        nextStep = "WS5";
                    } else if (CurrentStep == "WS7") {
                        nextStep = "WS5";
                    } else if (CurrentStep == "WS8") {
                        nextStep = "WS7";
                    } else if (CurrentStep == "WS9") {
                        nextStep = "WS8";
                    } else if (CurrentStep == "WS10") {
                        nextStep = "WS9";
                    } else if (CurrentStep == "WS11") {
                        nextStep = "WS10";
                    } else if (CurrentStep == "WS12") {
                        nextStep = "WS11";
                    } else if (CurrentStep == "WS13") {
                        nextStep = "WS12";
                    } else if (CurrentStep == "WS14") {
                        nextStep = "WS12";
                    } else if (CurrentStep == "WS15") {
                        nextStep = "WS14";
                    } else if (CurrentStep == "WS16") {
                        nextStep = "WS15";
                    } else if (CurrentStep == "WS17") {
                        nextStep = "WS16";
                    } else if (CurrentStep == "WS18") {
                        nextStep = "WS17";
                    } else if (CurrentStep == "WS19") {
                        nextStep = "WS18";
                    } else if (CurrentStep == "WS20") {
                        nextStep = "WS19";
                    } else if (CurrentStep == "WS21") {
                        if (model.ExistingStructuresPresent == 1) {
                            nextStep = "WS20";
                        } else {
                            nextStep = "WS17";
                        }

                    } else if (CurrentStep == "WS22") {
                        nextStep = "WS21";
                    } else if (CurrentStep == "WS23") {
                        nextStep = "WS22";
                    } else if (CurrentStep == "WS24") {
                        nextStep = "WS23";
                    } else if (CurrentStep == "WS25") {
                        nextStep = "WS24";
                    } else if (CurrentStep == "WS26") {
                        nextStep = "WS25";
                    } else if (CurrentStep == "WS27") {
                        nextStep = "WS26";
                    } else if (CurrentStep == "WS28") {
                        nextStep = "WS27";
                    }

                    for (var i = 0; i < theSteps.length; i++) {
                        var thisstep = theSteps[i];
                        if (thisstep.id == nextStep) {
                            //$step.hide();
                            //thisstep.show();
                            thisstep.style.display = 'inline';
                            document.getElementById('CurrentStep').value = nextStep;
                            //return;
                        } else {
                            thisstep.style.display = 'none';
                        }
                    }


                });

                // attach nextStep button handler
                $("#next-step").click(function () {

                    //save to database
                    CLearStateAndUpdateAssessmentInDB();

                    $("#CurrentDrawType").val("None").change();

                    var $step = $(".wizard-step:visible"); // get current step

                    //now move to the next step

                    //get current DDF factors
                    var CurrentMT = Math.floor(document.getElementById("MT").value);
                    var CurrentIC = Math.floor(document.getElementById("IC").value);
                    var CurrentV = Math.floor(document.getElementById("V").value);
                    var CurrentC = Math.floor(document.getElementById("C").value);
                    var CurrentRR = Math.floor(document.getElementById("R").value);

                    var CurrentMT_ErrorMargin = Math.floor(document.getElementById("MT_ErrorMargin").value);
                    var CurrentIC_ErrorMargin = Math.floor(document.getElementById("IC_ErrorMargin").value);
                    var CurrentV_ErrorMargin = Math.floor(document.getElementById("V_ErrorMargin").value);
                    var CurrentC_ErrorMargin = Math.floor(document.getElementById("C_ErrorMargin").value);
                    var CurrentRR_ErrorMargin = Math.floor(document.getElementById("R_ErrorMargin").value);

                    //get all the steps
                    var theSteps = document.getElementsByName("WS");
                    var CurrentStep = document.getElementById('CurrentStep').value;

                    //document.getElementById('info2').innerHTML = CurrentStep;

                    var model = @Html.Raw(Json.Encode(Model));

                    var AssessmentName = document.getElementById('AssessmentName').value;
                    var PageTitle = document.getElementById("PageTitle");
                    PageTitle.innerHTML = "Assessment:  " + AssessmentName;

                    //get the current properties set by controls
                    var StructureType;
                    var radioButtons = document.getElementsByName("StructureType");
                    for (var x = 0; x < radioButtons.length; x++) {
                        if (radioButtons[x].checked) {
                            StructureType = radioButtons[x].value;
                        }
                    }

                    var nextStep;
                    //work out which way to go given the user has clicked next
                    if (CurrentStep == "WS0") {  //assessment name

                        nextStep = "WS1_5";

                    } else if (CurrentStep == "WS1_5") { //structure type
                        
                        nextStep = "WS1";

                    } else if (CurrentStep == "WS1") {  //sketch the area

                        if (StructureType == "1") {
                            nextStep = "WS1_1"; //light structure types
                        } else if (StructureType == "2") {
                            //AdjustFactor("R", 2, 0.5);
                            //AddToConList("Heavy Structure");
                            nextStep = "WS1_2";  //heavy structure types
                        } else if (StructureType == "3") {
                            nextStep = "WS1_3"; //linear structure types
                        } else if (Number(StructureType) >= 4) {
                            //fill in the properties of the specific selected structure type and jump to the site walk questions
                            //the properties that are auot-filled are 
                            SetPropertiesForIBCStructure(StructureType);
                            nextStep = "WS9";
                        }


                    } else if (CurrentStep == "WS1_1") {//light struture
                        nextStep = "WS2";  //prompts for sketch of assessment area.
                    } else if (CurrentStep == "WS1_2") {//heavy Structure
                        nextStep = "WS2";  //prompts for sketch of assessment area.

                    } else if (CurrentStep == "WS1_3") { //linear structure
                        nextStep = "WS2_1";

                    } else if (CurrentStep == "WS2" || CurrentStep == "WS2_1") {
                        if (StructureType >= "4") {
                            nextStep = "WS9";
                        } else {
                            nextStep = "WS3";
                        }
                        
                    } else if (CurrentStep == "WS3") { //lifespan
                        nextStep = "WS4";
                    } else if (CurrentStep == "WS4") { //stories
                        nextStep = "WS5";
                    } else if (CurrentStep == "WS5") { //elevated or at grade
                        nextStep = "WS7";
                    } else if (CurrentStep == "WS6") { //life safety
                        nextStep = "WS7";
                    } else if (CurrentStep == "WS7") { //acceptable risk
                        nextStep = "WS8";
                    } else if (CurrentStep == "WS8") { //heated
                        nextStep = "WS9";
                    } else if (CurrentStep == "WS9" ) { //ice wedges
                        nextStep = "WS10";
                    } else if (CurrentStep == "WS10" ) { //topo
                        nextStep = "WS11";
                    } else if (CurrentStep == "WS11" ) { //thermokarst
                        nextStep = "WS12";
                    } else if (CurrentStep == "WS12" ) { //vegetation type
                        nextStep = "WS14";
                    } else if (CurrentStep == "WS13" ) { //black spruce - removed since overlap with previous question
                        nextStep = "WS14";
                    } else if (CurrentStep == "WS14" ) { //drunken forest
                        nextStep = "WS15";
                    } else if (CurrentStep == "WS15" ) { //marshes/water
                        nextStep = "WS16";
                    } else if (CurrentStep == "WS16" ) { //streams
                        nextStep = "WS17";
                    } else if (CurrentStep == "WS17") { //existing structures

                        var ExistingStructuresPresent;
                        var radioButtons = document.getElementsByName("ExistingStructuresPresent");
                        for (var x = 0; x < radioButtons.length; x++) {
                            if (radioButtons[x].checked) {
                                ExistingStructuresPresent = radioButtons[x].value;
                            }
                        }
                        if (ExistingStructuresPresent == "1") {
                            nextStep = "WS18";
                        } else {
                            nextStep = "WS21";
                            //show the assessment result
                            ShowDesktopAssessmentResults();
                        }

                    } else if (CurrentStep == "WS18" ) { //existing type
                        nextStep = "WS19";
                    } else if (CurrentStep == "WS19") { //existing heated
                        nextStep = "WS20";
                    } else if (CurrentStep == "WS20") { //existing condition
                        nextStep = "WS21";
                        //show the assessment result
                        ShowDesktopAssessmentResults();
                    } else if (CurrentStep == "WS21") { //intro of field assessment
                        LoadTransects("Basic", "TransectTable1");
                        nextStep = "WS22";
                    } else if (CurrentStep == "WS22") { //transect definition on map
                        LoadTransects("AddResistivityData", "TransectTable2");
                        nextStep = "WS23";
                    } else if (CurrentStep == "WS23") { //load transect resistivity data
                        LoadTransects("AddResistivityData", "TransectTable3");
                        nextStep = "WS24";
                    } else if (CurrentStep == "WS24") { //define boreholes
                        document.getElementById("BoreholeChartsVisible").value = "1";
                        LoadTransects("DataImport", "BoreholeTable");
                        nextStep = "WS25";
                    } else if (CurrentStep == "WS25") { //load borehole and plot with transect
                        //RunStabilityAssessment();
                        nextStep = "WS26";
                    } else if (CurrentStep == "WS26") { //analyze stability
                        nextStep = "WS27"
                    } else if (CurrentStep == "WS27") { //building site
                        RunFoundationTypeAssessment();
                        nextStep = "WS28";
                    }

                    for (var i = 0; i < theSteps.length; i++) {
                        var thisstep = theSteps[i];
                        if (thisstep.id == nextStep) {
                            //$step.hide();
                            //thisstep.show();
                            thisstep.style.display = 'inline';
                            document.getElementById('CurrentStep').value = nextStep;
                            //return;
                        } else {
                            thisstep.style.display = 'none';
                        }
                    }
                });

            });

        function SetPropertiesForIBCStructure(StructureType) {

            var Stories;
            var Length;
            var Width;
            var LifeSpan;
            var ElevGrade;
            var Heated;
            var RiskCategory;
            var LifeSafetyRequirement;

            debugger;

            if (StructureType == "4") { //Residential, Barracks: Lg:  >10 transient occupants/sleeping units
                Stories = "2"; Length = "20"; Width = "20"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "2"; LifeSafetyRequirement = "2";
            }

            if (StructureType == "5") { //Residential, Barracks: Lg: >16 permanent occupants 
                Stories = "2"; Length = "20"; Width = "20"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "2"; LifeSafetyRequirement = "2";
            }

            if (StructureType == "6") { //Residential, Barracks: Sm: <16 permanent occupants or < 10 transients
                Stories = "2"; Length = "10"; Width = "10"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "2"; LifeSafetyRequirement = "2";
            }

            if (StructureType == "7") { //Government Administration Building: n/a
                Stories = "2"; Length = "20"; Width = "20"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "2"; LifeSafetyRequirement = "2";
            }

            if (StructureType == "8") { //Educational Facility: Sm: <50 occupants, <70m2
                Stories = "1"; Length = "10"; Width = "7"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "2"; LifeSafetyRequirement = "2";
            }

            if (StructureType == "9") { //Educational Facility: Lg: >50, >70m2
                Stories = "2"; Length = "20"; Width = "20"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "2"; LifeSafetyRequirement = "2";
            }

            if (StructureType == "10") { //Public Gathering Facility: Sm: <50 occupants, <70m2
                Stories = "1"; Length = "10"; Width = "7"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "2"; LifeSafetyRequirement = "2";
            }

            if (StructureType == "11") { //Public Gathering Facility: Lg: >50, >70m2
                Stories = "2"; Length = "20"; Width = "20"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "2"; LifeSafetyRequirement = "2";
            }

            if (StructureType == "12") { //Church/Cemetery: Sm: <50 occupants, <70m2
                Stories = "1"; Length = "10"; Width = "7"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "2"; LifeSafetyRequirement = "2";
            }

            if (StructureType == "13") { //Church/Cemetery: Lg: >50, >70m2
                Stories = "1"; Length = "20"; Width = "20"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "2"; LifeSafetyRequirement = "2";
            }

            if (StructureType == "14") { //Canteen: Sm: <50 occupants, <70m2
                Stories = "1"; Length = "10"; Width = "7"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "2"; LifeSafetyRequirement = "2";
            }

            if (StructureType == "15") { //Canteen: Lg: >50, >70m2
                Stories = "2"; Length = "20"; Width = "20"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "2"; LifeSafetyRequirement = "2";
            }

            if (StructureType == "16") { //Commissary: n/a
                Stories = "1"; Length = "20"; Width = "20"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "1"; LifeSafetyRequirement = "1";
            }

            if (StructureType == "17") { //Office: Small
                Stories = "1"; Length = "10"; Width = "7"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "1"; LifeSafetyRequirement = "1";
            }

            if (StructureType == "18") { //Hospital/Clinic: Sm Custodial: <6 patients
                Stories = "1"; Length = "10"; Width = "7"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "2"; LifeSafetyRequirement = "2";
            }

            if (StructureType == "19") { //Hospital/Clinic: Med Custodial Care: 6-16 patients
                Stories = "1"; Length = "10"; Width = "10"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "2"; LifeSafetyRequirement = "2";
            }

            if (StructureType == "20") { //Hospital/Clinic: Lg Custodial care: >16 patients
                Stories = "2"; Length = "20"; Width = "20"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "2"; LifeSafetyRequirement = "2";
            }

            if (StructureType == "21") { //Hospital/Clinic: Hospitals: >5 patients
                Stories = "2"; Length = "20"; Width = "20"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "3"; LifeSafetyRequirement = "3";
            }

            if (StructureType == "22") { //Brig: >5 inmates
                Stories = "2"; Length = "20"; Width = "20"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "3"; LifeSafetyRequirement = "3";
            }

            if (StructureType == "23") { //Power plant: n/a
                Stories = "3"; Length = "20"; Width = "20"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "2"; LifeSafetyRequirement = "2";
            }

            if (StructureType == "24") { //Nuclear power plant: n/a
                Stories = "3"; Length = "20"; Width = "20"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "3"; LifeSafetyRequirement = "3";
            }

            if (StructureType == "25") { //Water treatment plant: n/a
                Stories = "3"; Length = "20"; Width = "20"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "2"; LifeSafetyRequirement = "2";
            }

            if (StructureType == "26") { //Wastewater treatment plant: n/a
                Stories = "3"; Length = "20"; Width = "20"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "2"; LifeSafetyRequirement = "2";
            }

            if (StructureType == "27") { //Television/Communications Broadcast station: n/a
                Stories = "2"; Length = "20"; Width = "20"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "3"; LifeSafetyRequirement = "3";
            }

            if (StructureType == "28") { //Cell tower: n/a
                Stories = "20"; Length = "20"; Width = "20"; LifeSpan = "30"; ElevGrade = "2"; Heated = "2"; RiskCategory = "3"; LifeSafetyRequirement = "3";
            }

            if (StructureType == "29") { //Manufacturing Facility: Low Hazard
                Stories = "2"; Length = "20"; Width = "20"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "2"; LifeSafetyRequirement = "2";
            }
            
            if (StructureType == "30") { //Manufacturing Facility: Moderate Hazard
                Stories = "2"; Length = "20"; Width = "20"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "2"; LifeSafetyRequirement = "2";
            }

            if (StructureType == "31") { //Manufacturing Facility: High Hazard
                Stories = "2"; Length = "20"; Width = "20"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "3"; LifeSafetyRequirement = "3";
            }

            if (StructureType == "32") { //Utility: Moderate Hazard
                Stories = "1"; Length = "20"; Width = "20"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "2"; LifeSafetyRequirement = "2";
            }

            if (StructureType == "33") { //Storage: Sm: <9.3m2 (100'), non-hazardous
                Stories = "1"; Length = "3"; Width = "3"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "1"; LifeSafetyRequirement = "1";
            }

            if (StructureType == "34") { //Storage: Lg: >9.3m2 (100'), non-hazardous
                Stories = "1"; Length = "10"; Width = "10"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "2"; LifeSafetyRequirement = "2";
            }

            if (StructureType == "35") { //Storage: High Hazard
                Stories = "1"; Length = "20"; Width = "20"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "3"; LifeSafetyRequirement = "3";
            }

            if (StructureType == "36") { //Warehouse: Low Hazard
                Stories = "1"; Length = "20"; Width = "20"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "2"; LifeSafetyRequirement = "2";
            }

            if (StructureType == "37") { //Warehouse: Moderate Hazard
                Stories = "1"; Length = "20"; Width = "20"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "2"; LifeSafetyRequirement = "2";
            }

            if (StructureType == "38") { //Warehouse: High Hazard
                Stories = "1"; Length = "20"; Width = "20"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "3"; LifeSafetyRequirement = "3";
            }

            if (StructureType == "39") { //Hangers: n/a
                Stories = "1"; Length = "20"; Width = "20"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "3"; LifeSafetyRequirement = "3";
            }

            if (StructureType == "40") { //Ammunition Depo: n/a
                Stories = "1"; Length = "20"; Width = "20"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "3"; LifeSafetyRequirement = "3";
            }

            if (StructureType == "41") { //Multiple use: n/a
                Stories = "1"; Length = "20"; Width = "20"; LifeSpan = "30"; ElevGrade = "2"; Heated = "1"; RiskCategory = "2"; LifeSafetyRequirement = "2";
            }


            debugger;
            var StoriesTxt = document.getElementsByName("Stories");
            StoriesTxt[0].value = Stories;
            var LengthTxt = document.getElementsByName("StructureLength");
            LengthTxt[0].value = Length;
            var WidthTxt = document.getElementsByName("StructureWidth");
            WidthTxt[0].value = Width;
            var LifeSpanTxt = document.getElementsByName("LifeSpan");
            LifeSpanTxt[0].value = LifeSpan;
            var radioButtons_ElevGrade = document.getElementsByName("FoundationElevation");
            for (var x = 0; x < radioButtons_ElevGrade.length; x++) {
                if (radioButtons_ElevGrade[x].value == ElevGrade) { //at grade
                    radioButtons_ElevGrade[x].checked = true;
                } else {
                    radioButtons_ElevGrade[x].checked = false;
                }
            }
            var radioButtons_Heated = document.getElementsByName("StructureHeated");
            for (var x = 0; x < radioButtons_Heated.length; x++) {
                if (radioButtons_Heated[x].value == Heated) { //heated
                    radioButtons_Heated[x].checked = true;
                } else {
                    radioButtons_Heated[x].checked = false;
                }
            }
            var radioButtons_Risk = document.getElementsByName("AcceptableFoundationFailureRiskLevel");
            for (var x = 0; x < radioButtons_Risk.length; x++) {
                if (radioButtons_Risk[x].value == RiskCategory) { 
                    radioButtons_Risk[x].checked = true;
                } else {
                    radioButtons_Risk[x].checked = false;
                }
            }
            var radioButtons_LifeSafety = document.getElementsByName("LifeSafetyRequirement");
            for (var x = 0; x < radioButtons_LifeSafety.length; x++) {
                if (radioButtons_LifeSafety[x].value == LifeSafetyRequirement) { 
                    radioButtons_LifeSafety[x].checked = true;
                } else {
                    radioButtons_LifeSafety[x].checked = false;
                }
            }



        }

        function GoToWizardStep(theStep) {

            var theSteps = document.getElementsByName("WS");

            if (theStep == "WS22") { //intro of field assessment
                LoadTransects("Basic", "TransectTable1");
            } else if (theStep == "WS23") { //transect definition on map
                LoadTransects("AddResistivityData", "TransectTable2");
            } else if (theStep == "WS24") { //load transect resistivity data
                LoadTransects("AddResistivityData", "TransectTable3");
            } else if (theStep == "WS25") { //define boreholes
                document.getElementById("BoreholeChartsVisible").value = "1";
                LoadTransects("DataImport", "BoreholeTable");
            }

            for (var i = 0; i < theSteps.length; i++) {
                var thisstep = theSteps[i];
                if (thisstep.id == theStep) {
                    thisstep.style.display = 'inline';
                    document.getElementById('CurrentStep').value = theStep;
                } else {
                    thisstep.style.display = 'none';
                }
            }
        }


        function GetNEDElevation(X, Y) {
            //var theURL = 'http://nationalmap.gov/epqs/pqs.php?x='+ X + '&y=' + Y + '&units=Feet&output=json';
            var theURL = 'https://nationalmap.gov/epqs/pqs.php?x=-147&y=64&units=Feet&output=json';
            var params = {x: X, y: Y, units: 'Meters', output: 'json'};
            $.ajax({
                type: 'GET',
                url: 'https://nationalmap.gov/epqs/pqs.php',
                data: params,
                dataType: 'text',
                async: 'false',
                success: function(response) {
                    var thisElevText = JSON.parse(response);
                    var thisElev = thisElevText.USGS_Elevation_Point_Query_Service.Elevation_Query.Elevation;
                    var thisX = thisElevText.USGS_Elevation_Point_Query_Service.Elevation_Query.x;
                    var thisY = thisElevText.USGS_Elevation_Point_Query_Service.Elevation_Query.y;
                    document.getElementById("TransectElevs").value = document.getElementById("TransectElevs").value + "; " + thisX + "," + thisY + "," + thisElev;
                },
                error: function(error) {
                    debugger;
                }
            });
        }

        function CLearStateAndUpdateAssessmentInDB(btnClicked) {

            $.ajax({

                type: "POST",
                url: "/Wizard/ClearState",

                error: function(xhr, status, error) {
                    debugger;
                },

                success: function(response) {
                    UpdateAssessmentInDB();
                }
            });
        }

        function UpdateAssessmentInDB(ShowWait) {


            if (ShowWait === 'undefined') ShowWait = false;

            var $form = $('form');

            var modelDataJSON = @Html.Raw(Json.Encode(Model));

            modelDataJSON.AssessmentName = "test";

           // var modelDataJSON = Json.Encode(Model);

            var datastring  = '{theAssessment:' +  JSON.stringify(modelDataJSON, null, 2) + '}';

            var fser = $form.serialize();
            var fact = $form.attr('action');


            if (ShowWait){
                show('loading', true);
                //show('MainTool', false);
            }

            $.ajax({
                type: "POST",
                url: "/Wizard/Update",
                data: $('form').serialize() + "&theTransectBlob=" +  document.getElementById("TransectBlob").value + "&theTransectProps=" + document.getElementById("TransectProps").value + "&BHLocationData=" +  document.getElementById("BHLocationData").value + "&BHSampleData=" +  document.getElementById("BHSampleData").value  + "&CurrentTransectName=" +  document.getElementById("CurrentTransectName").value,


                error: function(xhr, status, error) {

                    debugger;
                    show('loading', false);
                    //show('MainTool', true);

                },
                success: function(response) {
                    show('loading', false);
                    //show('MainTool', true);
                    if (response != "") {

                        $('#CurrentModel').val(JSON.stringify(response));

                        MapBoreholes();
                    }

                    EvaluateDDFfromAssessment();

               }

            });

            return false;


        }

        function EvaluateDDFfromAssessment() {

            //work though the assessment and build a condition list
            //evalaute the DDF based on these conditions
            var CurModel = document.getElementById("CurrentModel").value;
            var model = null;
            if (CurModel != null && CurModel != "") {
                model = JSON.parse(CurModel);
            } else {
                model =  @Html.Raw(Json.Encode(Model));
            }

            var CurrentMT = Number(document.getElementById("MT").value);
            var CurrentIC = Number(document.getElementById("IC").value);
            var CurrentV = Number(document.getElementById("V").value);
            var CurrentC = Number(document.getElementById("C").value);
            var CurrentR = Number(document.getElementById("R").value);

            var CurrentMT_ErrorMargin = Number(document.getElementById("MT_ErrorMargin").value);
            var CurrentIC_ErrorMargin = Number(document.getElementById("IC_ErrorMargin").value);
            var CurrentV_ErrorMargin = Number(document.getElementById("V_ErrorMargin").value);
            var CurrentC_ErrorMargin = Number(document.getElementById("C_ErrorMargin").value);
            var CurrentR_ErrorMargin = Number(document.getElementById("R_ErrorMargin").value);

            document.getElementById("ConditionList").value = "";

            if (model.StructureType == 1) {//light
                if (model.LightStructureUse == 1) {  //Warehouse
                    AddToConditionList("Light Structure Type 1", "0,0,0,1,0", "0,0,0,0.1,0", "None")
                } else if (model.LightStructureUse == 2) {  //Residential
                    AddToConditionList("Light Structure Type 2", "0,0,0,2,-2", "0,0,0,0.1,0.1", "None")
                } else if (model.LightStructureUse == 3) {  //Offices
                    AddToConditionList("Light Structure Type 3", "0,0,0,1,-2", "0,0,0,0.1,0.1", "None")
                }
            }

            if (model.StructureType == 2) {//heavy
                AddToConditionList("Heavy Structure", "0,0,0,0,2", "0,0,0,0,0", "Con");
                if (model.HeavyStructureUse == 1) {  //hospital
                    AddToConditionList("Hospital", "0,0,0,4,4", "0,0,0,0.1,0.1", "Con");
                } else if (model.HeavyStructureUse == 2) {  //Power Plant
                    AddToConditionList("Power Plant", "0,0,0,3,4", "0,0,0,0.1,0.1", "Con");
                }
            }

            if (model.StructureType == 3) { //Linear
                if (model.LinearStructureUse == 1) {  //Roadway
                    AddToConditionList("Roadway", "0,0,0,-2,0", "0,0,0,0.1,0.1", "Pro");
                } else if (model.LinearStructureUse == 2) {  //Pipeline
                    AddToConditionList("Pipeline", "0,0,0,5,4", "0,0,0,0.1,0.1", "Con");
                }
            }

            if (model.LifeSpan > 30 ) {  //Lifespan
                AddToConditionList("Life Span > 30 years", "0,0,0,2,2", "0,0,0,0.1,0.1", "Con");
            }

            if (model.Stories > 2 ) {  //NumStories
                AddToConditionList("High Structure", "0,0,0,2,2", "0,0,0,0.1,0.1", "Con");
            }

            if (model.FoundationElevation == 1) {  //Raised
                AddToConditionList("Raised Foundation", "0,0,0,1,1", "0,0,0,0.1,0.1", "Con");
            } else if (model.FoundationElevation == 2) {  //On-grade
                AddToConditionList("Foundation on Grade", "0,0,0,3,3", "0,0,0,0.1,0.1", "Con");
            }

            if (model.AcceptableFoundationFailureRiskLevel == 1) {  //High
                AddToConditionList("High Acceptable Risk of Failure", "0,0,0,-1,-1", "0,0,0,0.1,0", "Pro");
            } else if (model.AcceptableFoundationFailureRiskLevel == 2) {  //Med
                AddToConditionList("Medium Acceptable Risk of Failure", "0,0,0,2,2", "0,0,0,0.1,0.1", "Con");
            } else if (model.AcceptableFoundationFailureRiskLevel == 3) {  //Low
                AddToConditionList("Low Acceptable Risk of Failure", "0,0,0,4,4", "0,0,0,0.1,0.1", "Con");
            }

            if (model.StructureHeated == 1) {  //Heated
                AddToConditionList("Heated Structure", "0,0,0,3,3", "0,0,0,0.1,0.1", "Con");
            } else if (model.StructureHeated == 2) {  //Not Heated
                AddToConditionList("Structure not Heated", "0,0,0,-1,0", "0,0,0,0.1,0.1", "Pro");
            }

            if (model.ObservedIceWedges == 1) {  //Present
                AddToConditionList("Ice Wedges Present", "0,0,0,2,2", "0,0,0,0.1,0.1", "Con");
            } else if (model.ObservedIceWedges == 2) {  //Not Present
                AddToConditionList("Ice Wegdes not present", "0,0,0,0,0", "0,0,0,0.1,0.1", "Pro");
            }

            if (model.TopographyEstimate == 1) {  //Flat
                AddToConditionList("Flat Topography", "0,0,0,1,0", "0,0,0,0.1,0", "Con");
            } else if (model.TopographyEstimate == 2) {  //Moderate
                AddToConditionList("Moderate Topography", "0,0,0,0,0", "0,0,0,0.1,0", "Pro");
            } else if (model.TopographyEstimate == 3) {  //Steep
                AddToConditionList("Steep Topography", "0,0,0,1,0", "0,0,0,0.1,0", "Con");
            }

            if (model.ThermoKarstPresent == 1) {  //Present
                AddToConditionList("Thermokarst Present", "0,0,0,4,0", "0,0,0,0.1,0", "Con");
            } else if (model.ThermoKarstPresent == 2) {  //Not Present
                AddToConditionList("Thermokarst Not Present", "0,0,0,0,0", "0,0,0,0.1,0", "Pro");
            }

            if (model.DrunkenForestPresent == 1) {  //Present
                AddToConditionList("Drunken Forest Present", "3,3,4,3,3", "0.1,0.1,0.1,0.1,0.1", "Con");
            } else if (model.DrunkenForestPresent == 2) {  //Not Present
                AddToConditionList("Drunken Forest Not Present", "0,0,0,0,0", "0.1,0.1,0.1,0.1,0.1", "Pro");
            }

            if (model.VegetationType == 1) {  //LowElevationBlackSpruce
                AddToConditionList("Low Elevation Black Spruce", "3,4,3,4,4", "0.1,0.1,0.1,0.1,0.1", "Con");
            } else if (model.VegetationType == 2) {  //High ELevation Black Spruce
                AddToConditionList("High Elevation Black Spruce", "-2,0,0,0,0", "0.1,0.1,0.1,0.1,0.1", "Pro");
            } else if (model.VegetationType == 3) {  //White Spruce
                AddToConditionList("White Spruce", "-1,2,1,2,3", "0.1,0.1,0.1,0.1,0.1", "Con");
            } else if (model.VegetationType == 4) {  //Deciduous
                AddToConditionList("Deciduous", "-1,0,0,-1,-1", "0.1,0.1,0.1,0.1,0.1", "Pro");
            } else if (model.VegetationType == 5) {  //Tussock
                AddToConditionList("Tussock", "4,4,4,4,4", "0.1,0.1,0.1,0.1,0.1", "Con");
            } else if (model.VegetationType == 6) {  //Early Succession Boreal Forest
                AddToConditionList("Early Succession Boreal Forest", "0,0,0,2,1", "0.1,0.1,0.1,0.1,0.1", "Con");
            }

            if (model.MarshesStandingWaterPresent == 1) {  //Present
                AddToConditionList("Marshes Standing Water Present", "2,2,3,1,2", "0.1,0.1,0.1,0.1,0.1", "Con");
            } else if (model.MarshesStandingWaterPresent == 2) {  //Not Present
                AddToConditionList("Marshes Standing Water Not Present", "0,0,0,0,0", "0.1,0.1,0.1,0.1,0.1", "Pro");
            }

            if (model.StreamsPresent == 1) {  //Present
                AddToConditionList("Streams Present", "0,0,0,1,1", "0.1,0.1,0.1,0.1,0.1", "Con");
            } else if (model.StreamsPresent == 2) {  //Not Present
                AddToConditionList("Streams Not Present", "0,0,0,0,0", "0.1,0.1,0.1,0.1,0.1", "Pro");
            }

            if (model.ExistingStructuresPresent == 1) {
                if (model.ExistingStructureType == 1) {  //Light
                    AddToConditionList("Light Structure Present", "0,0,0,-1,-1", "0,0,0,0.1,0.1", "Pro");
                } else if (model.ExistingStructureType == 2) {  //Heavy
                    AddToConditionList("Pipeline", "0,0,0,1,1", "0,0,0,0.1,0.1", "Con");
                } else if (model.ExistingStructureType == 3) {  //Linear
                    AddToConditionList("Pipeline", "0,0,0,-2,0", "0,0,0,0.1,0.1", "Pro");
                }

                if (model.ExistingStructuresHeated == 1) {  //Heated
                    AddToConditionList("Existing Structure Heated", "0,0,0,1,1", "0,0,0,0.1,0.1", "Con");
                } else if (model.ExistingStructuresHeated == 2) {  //Not
                    AddToConditionList("Existing Structure Not Heated", "0,0,0,0,0", "0,0,0,0.1,0.1", "Pro");
                }

                if (model.ExistingStructuresFoundationCondition == 1) {  //Good
                    AddToConditionList("Existing Structure Foundation is Good", "0,0,0,0,0", "0.1,0.1,0.1,0.1,0.1", "Pro");
                } else if (model.ExistingStructuresFoundationCondition == 2) {  //failing
                    AddToConditionList("Existing Structure Foundation Failing", "3,3,0,4,3", "0.1,0.1,0.1,0.1,0.1", "Con");
                } else if (model.ExistingStructuresFoundationCondition == 3) {  //Failed
                    AddToConditionList("Existing Structure Foundation Failed", "4,4,0,4,4", "0.1,0.1,0.1,0.1,0.1", "Con");
                }
            }

            //start with the basic ddf and uncertainties.  Work through each condition and adjust each factor and uncertainty

            var CurrentMT = 6;
            var CurrentIC = 5;
            var CurrentV = 5;
            var CurrentC = 4;
            var CurrentR = 4;

            var CurrentMT_ErrorMargin = 4;
            var CurrentIC_ErrorMargin = 4;
            var CurrentV_ErrorMargin = 4;
            var CurrentC_ErrorMargin = 4;
            var CurrentR_ErrorMargin = 4;


            var ConditionList = document.getElementById("ConditionList").value;

            var Conditions = ConditionList.split(";");
            for (var Cindex = 0; Cindex < Conditions.length-1; Cindex++) {
                var ConItems = Conditions[Cindex].split(",");
                if (ConItems.length >= 11) {
                    var MTAdd = ConItems[1];
                    var ICAdd = ConItems[2];
                    var VAdd = ConItems[3];
                    var CAdd = ConItems[4];
                    var RAdd = ConItems[5];
                    var MTErrorAdd = ConItems[6];
                    var ICErrorAdd = ConItems[7];
                    var VErrorAdd = ConItems[8];
                    var CErrorAdd = ConItems[9];
                    var RErrorAdd = ConItems[10];
                    CurrentMT = CurrentMT + Number(MTAdd)/2;
                    CurrentIC = CurrentIC + Number(ICAdd)/2;
                    CurrentV = CurrentV + Number(VAdd)/2;
                    CurrentC = CurrentC + Number(CAdd)/6;
                    CurrentR = CurrentR + Number(RAdd)/6;
                    CurrentMT_ErrorMargin = CurrentMT_ErrorMargin + Number(MTErrorAdd);
                    CurrentIC_ErrorMargin = CurrentIC_ErrorMargin + Number(ICErrorAdd);
                    CurrentV_ErrorMargin = CurrentV_ErrorMargin + Number(VErrorAdd);
                    CurrentC_ErrorMargin = CurrentC_ErrorMargin + Number(VErrorAdd);
                    CurrentR_ErrorMargin = CurrentR_ErrorMargin + Number(RErrorAdd);
                }

            }

            document.getElementById("MT").value = CurrentMT;
            document.getElementById("IC").value = CurrentIC;
            document.getElementById("V").value = CurrentV;
            document.getElementById("C").value = CurrentC;
            document.getElementById("R").value = CurrentR;

            document.getElementById("MT_ErrorMargin").value = CurrentMT_ErrorMargin;
            document.getElementById("IC_ErrorMargin").value = CurrentIC_ErrorMargin;
            document.getElementById("V_ErrorMargin").value = CurrentV_ErrorMargin;
            document.getElementById("C_ErrorMargin").value = CurrentC_ErrorMargin;
            document.getElementById("R_ErrorMargin").value = CurrentR_ErrorMargin;

            UpdateDDFChartData();
            UpdateChart("chartContainer");


        }


            function AdjustFactor(FactorName, AdjustValue, UncertaintyReduction) {

                var CurrentMT = Number(document.getElementById("MT").value);
                var CurrentIC = Number(document.getElementById("IC").value);
                var CurrentV = Number(document.getElementById("V").value);
                var CurrentC = Number(document.getElementById("C").value);
                var CurrentR = Number(document.getElementById("R").value);

                var CurrentMT_ErrorMargin = Number(document.getElementById("MT_ErrorMargin").value);
                var CurrentIC_ErrorMargin = Number(document.getElementById("IC_ErrorMargin").value);
                var CurrentV_ErrorMargin = Number(document.getElementById("V_ErrorMargin").value);
                var CurrentC_ErrorMargin = Number(document.getElementById("C_ErrorMargin").value);
                var CurrentR_ErrorMargin = Number(document.getElementById("R_ErrorMargin").value);


                if (FactorName == "MT") {
                    document.getElementById("MT").value = CurrentMT + AdjustValue/2;
                    document.getElementById("MT_ErrorMargin").value = CurrentMT_ErrorMargin - UncertaintyReduction;
                } else if (FactorName == "IC") {
                    document.getElementById("IC").value = CurrentIC + AdjustValue/2;
                    document.getElementById("IC_ErrorMargin").value = CurrentIC_ErrorMargin - UncertaintyReduction;
                } else if (FactorName == "V") {
                    document.getElementById("V").value = CurrentV + AdjustValue/2;
                    document.getElementById("V_ErrorMargin").value = CurrentV_ErrorMargin - UncertaintyReduction;
                } else if (FactorName == "R") {
                    document.getElementById("R").value = CurrentR + AdjustValue/6;
                    document.getElementById("R_ErrorMargin").value = CurrentR_ErrorMargin - UncertaintyReduction;
                } else if (FactorName == "C") {
                    document.getElementById("C").value = CurrentC + AdjustValue/6;
                    document.getElementById("C_ErrorMargin").value = CurrentC_ErrorMargin - UncertaintyReduction;
                }

                //UpdateDDFChartData();
                //UpdateChart("chartContainer");

            }

            function AddToConditionList(ConditionName, FactorInfluences, UncertaintyInfluences, ProCon) {
                var CurrentConReport = document.getElementById("ConditionList").value;
                document.getElementById("ConditionList").value = CurrentConReport + ConditionName + "," + FactorInfluences + "," + UncertaintyInfluences + "," + ProCon +  ";";
            }

            function AddToConList(ConText) {
                var CurrentConReport = document.getElementById("ConList").value;
                document.getElementById("ConList").value = CurrentConReport + ConText + ";";
            }

            function AddToProList(ProText) {
                var CurrentProReport = document.getElementById("ProList").value;
                document.getElementById("ProList").value = CurrentProReport + ProText + ";";
            }

            function RunThawSettlementAssessment() {

                 //Interpolate settlement surface by working along transect, creating polygons transverse to the borehole.
                InterpolateThawSettleSurfaceGeometry();

                //then map the surface
                MapKnownThawSettlementArea();
            }

            function InterpolateThawSettleSurfaceGeometry() {

                var newThawSurfaceText = "";
                var CurModel = document.getElementById("CurrentModel").value;
                var model = null;
                if (CurModel != null && CurModel != "") {
                    model = JSON.parse(CurModel);
                } else {
                    model =  @Html.Raw(Json.Encode(Model));
                }

                if (model.Boreholes != null) {
                    if (model.Boreholes.length > 1) {
                        var SwathWidth = 100;

                        for (var Tindex = 0; Tindex < model.Transects.length; Tindex++) {

                            newThawSurfaceText = "";

                            var TargetTransectName = model.Transects[Tindex].TransectName;

                            //first get the bulk angle of the boreholes for the transect - this is the angle created by the line from the first borehole to the last.
                            var FirstBorehole = model.Boreholes[0];
                            var LastBorehole = model.Boreholes[model.Boreholes.length-1];

                            var FirstBHPoint = new ol.geom.Point(ol.proj.transform([FirstBorehole.Longitude, FirstBorehole.Latitude], 'EPSG:4326', 'EPSG:3857'));
                            var LastBHPoint = new ol.geom.Point(ol.proj.transform([LastBorehole.Longitude, LastBorehole.Latitude], 'EPSG:4326', 'EPSG:3857'));

                            var FirstCoord = FirstBHPoint.getCoordinates();
                            var LastCoord = LastBHPoint.getCoordinates();

                            var BulkXDelta = LastCoord[0] - FirstCoord[0];
                            var BulkYDelta = LastCoord[1] - FirstCoord[1];

                            var BulkTheta = Math.atan(BulkYDelta/BulkXDelta);

                            for (var i = 1; i < model.Boreholes.length; i++) {

                                if(model.Boreholes[i].TransectName == TargetTransectName && model.Boreholes[i-1].TransectName == TargetTransectName) {
                                    var thisBorehole1 = model.Boreholes[i-1];
                                    var thisBorehole2 = model.Boreholes[i];

                                    //if (isProposedBorehole(thisBorehole.Station)) {
                                    var thispointgeom = new ol.geom.Point(ol.proj.transform([thisBorehole1.Longitude, thisBorehole1.Latitude], 'EPSG:4326', 'EPSG:3857'));
                                    var thatpointgeom = new ol.geom.Point(ol.proj.transform([thisBorehole2.Longitude, thisBorehole2.Latitude], 'EPSG:4326', 'EPSG:3857'));

                                    var coord1 = thispointgeom.getCoordinates();
                                    var coord2 = thatpointgeom.getCoordinates();

                                    var XDelta = coord2[0] - coord1[0];
                                    var YDelta = coord2[1] - coord1[1];

                                    var BHDist = Math.pow(XDelta, 2) + Math.pow(YDelta, 2);

                                    BHDist = Math.pow(BHDist, 0.5);



                                    if (BHDist < 40) {

                                        //determine swath width as a function of variability in depths in neighborhood of boreholes
                                        var BHSettlementRange = 0;
                                        var BHSettlementMin = 10000;
                                        var BHSettlmentMax = -100000;
                                        for (var k = i - 2; k <= i + 2; k++) {
                                            if (k >= 0 && k < model.Boreholes.length) {

                                                var theBH = model.Boreholes[k];
                                                var BHSettlement = theBH.PotentialThawSettlement;

                                                if (BHSettlement > BHSettlmentMax) {
                                                    BHSettlmentMax = BHSettlement
                                                }
                                                if (BHSettlement < BHSettlementMin) {
                                                    BHSettlementMin = BHSettlement
                                                }
                                            }
                                        }
                                        BHSettlementRange = BHSettlmentMax - BHSettlementMin;

                                        if (BHSettlementRange < 10) {
                                            SwathWidth = 50;
                                        } else if (BHSettlementRange < 20) {
                                            SwathWidth = 30;
                                        } else if (BHSettlementRange < 30) {
                                            SwathWidth = 20;
                                        } else if (BHSettlementRange < 40) {
                                            SwathWidth = 10;
                                        } else {
                                            SwathWidth = 2;
                                        }

                                        //create a cross section at each borehole
                                        var theta = Math.atan(YDelta/XDelta);
                                        var XdeltaPrime = SwathWidth * Math.cos(Math.PI/2.0 + BulkTheta);
                                        var YdeltaPrime = SwathWidth * Math.sin(Math.PI/2.0 + BulkTheta);

                                        thisBorehole1.LeftSwathPointX = XdeltaPrime + coord1[0];
                                        thisBorehole1.LeftSwathPointY = YdeltaPrime + coord1[1];

                                        var XdeltaPrime2 = SwathWidth * Math.cos(Math.PI/2.0 + BulkTheta + Math.PI);
                                        var YdeltaPrime2 = SwathWidth * Math.sin(Math.PI/2.0 + BulkTheta + Math.PI);

                                        thisBorehole1.RightSwathPointX = XdeltaPrime2 + coord1[0];
                                        thisBorehole1.RightSwathPointY = YdeltaPrime2 + coord1[1];

                                        var thisBHThawSettlement = FindBoreholePotenitalThawSettlement(thisBorehole1.BoreholeID);

                                        //find the stable depth of this borehole
                                        newThawSurfaceText = newThawSurfaceText + ";" + thisBorehole1.LeftSwathPointX + "," + thisBorehole1.LeftSwathPointY + "," + thisBorehole1.RightSwathPointX + "," + thisBorehole1.RightSwathPointY + "," + thisBHThawSettlement;
                                    }

                                }
                            }

                            newThawSurfaceText = newThawSurfaceText.substr(1, newThawSurfaceText.length-1);

                            document.getElementById("KnownThawSettlementPoints").value = newThawSurfaceText;

                        }


                    }


                }


            }


            function RunStabilityAssessment() {

                var newKnownStableAreaText = "";
                var CurModel = document.getElementById("CurrentModel").value;
                var model = null;
                if (CurModel != null && CurModel != "") {
                    model = JSON.parse(CurModel);
                } else {
                    model =  @Html.Raw(Json.Encode(Model));
                }

                if (model.Boreholes != null) {
                    if (model.Boreholes.length > 1) {
                        var SwathWidth = 100;

                        for (var Tindex = 0; Tindex < model.Transects.length; Tindex++) {

                            newKnownStableAreaText = "";

                            var TargetTransectName = model.Transects[Tindex].TransectName;

                            //first get the bulk angle of the boreholes for the transect - this is the angle created by the line from the first borehole to the last.
                            var FirstBorehole = model.Boreholes[0];
                            var LastBorehole = model.Boreholes[model.Boreholes.length-1];

                            var FirstBHPoint = new ol.geom.Point(ol.proj.transform([FirstBorehole.Longitude, FirstBorehole.Latitude], 'EPSG:4326', 'EPSG:3857'));
                            var LastBHPoint = new ol.geom.Point(ol.proj.transform([LastBorehole.Longitude, LastBorehole.Latitude], 'EPSG:4326', 'EPSG:3857'));

                            var FirstCoord = FirstBHPoint.getCoordinates();
                            var LastCoord = LastBHPoint.getCoordinates();

                            var BulkXDelta = LastCoord[0] - FirstCoord[0];
                            var BulkYDelta = LastCoord[1] - FirstCoord[1];

                            var BulkTheta = Math.atan(BulkYDelta/BulkXDelta);

                            for (var i = 1; i < model.Boreholes.length; i++) {

                                if(model.Boreholes[i].TransectName == TargetTransectName && model.Boreholes[i-1].TransectName == TargetTransectName) {
                                    var thisBorehole1 = model.Boreholes[i-1];
                                    var thisBorehole2 = model.Boreholes[i];

                                    //if (isProposedBorehole(thisBorehole.Station)) {
                                    var thispointgeom = new ol.geom.Point(ol.proj.transform([thisBorehole1.Longitude, thisBorehole1.Latitude], 'EPSG:4326', 'EPSG:3857'));
                                    var thatpointgeom = new ol.geom.Point(ol.proj.transform([thisBorehole2.Longitude, thisBorehole2.Latitude], 'EPSG:4326', 'EPSG:3857'));

                                    var coord1 = thispointgeom.getCoordinates();
                                    var coord2 = thatpointgeom.getCoordinates();

                                    var XDelta = coord2[0] - coord1[0];
                                    var YDelta = coord2[1] - coord1[1];

                                    var BHDist = Math.pow(XDelta, 2) + Math.pow(YDelta, 2);

                                    BHDist = Math.pow(BHDist, 0.5);



                                    if (BHDist < 40) {

                                        //determine swath width as a function of variability in depths in neighborhood of boreholes
                                        var BHDepthRange = 0;
                                        var BHDepthMin = 10000;
                                        var BHDepthMax = -100000;
                                        for (var k = i - 2; k <= i + 2; k++) {
                                            if (k >= 0 && k < model.Boreholes.length) {
                                                var BHStableDepth = 999;
                                                var theBH = model.Boreholes[k];
                                                for (var j = 0; j < theBH.BHSamples.length; j++) {
                                                    thisBHS = theBH.BHSamples[j];
                                                    if (thisBHS.Stability >= 4) {
                                                        BHStableDepth = thisBHS.Depth/100.0;
                                                        break;
                                                    }
                                                }
                                                if (BHStableDepth > BHDepthMax) {
                                                    BHDepthMax = BHStableDepth
                                                }
                                                if (BHStableDepth < BHDepthMin) {
                                                    BHDepthMin = BHStableDepth
                                                }
                                            }
                                        }
                                        BHDepthRange = BHDepthMax - BHDepthMin;

                                        if (BHDepthRange < 1) {
                                            SwathWidth = 50;
                                        } else if (BHDepthRange < 2) {
                                            SwathWidth = 30;
                                        } else if (BHDepthRange < 3) {
                                            SwathWidth = 20;
                                        } else if (BHDepthRange < 4) {
                                            SwathWidth = 10;
                                        } else {
                                            SwathWidth = 2;
                                        }

                                        //create a cross section at each borehole
                                        var theta = Math.atan(YDelta/XDelta);
                                        var XdeltaPrime = SwathWidth * Math.cos(Math.PI/2.0 + BulkTheta);
                                        var YdeltaPrime = SwathWidth * Math.sin(Math.PI/2.0 + BulkTheta);

                                        thisBorehole1.LeftSwathPointX = XdeltaPrime + coord1[0];
                                        thisBorehole1.LeftSwathPointY = YdeltaPrime + coord1[1];

                                        var XdeltaPrime2 = SwathWidth * Math.cos(Math.PI/2.0 + BulkTheta + Math.PI);
                                        var YdeltaPrime2 = SwathWidth * Math.sin(Math.PI/2.0 + BulkTheta + Math.PI);

                                        thisBorehole1.RightSwathPointX = XdeltaPrime2 + coord1[0];
                                        thisBorehole1.RightSwathPointY = YdeltaPrime2 + coord1[1];

                                        var thisStableDepth = 999;

                                        for (var j = 0; j < thisBorehole1.BHSamples.length; j++) {
                                            thisBHS = thisBorehole1.BHSamples[j];
                                            if (thisBHS.Stability >= 4) {
                                                thisStableDepth = thisBHS.Depth/100.0;
                                                break;
                                            }
                                        }


                                        //find the stable depth of this borehole
                                        newKnownStableAreaText = newKnownStableAreaText + ";" + thisBorehole1.LeftSwathPointX + "," + thisBorehole1.LeftSwathPointY + "," + thisBorehole1.RightSwathPointX + "," + thisBorehole1.RightSwathPointY + "," + thisStableDepth;
                                    }

                                }
                            }

                            newKnownStableAreaText = newKnownStableAreaText.substr(1, newKnownStableAreaText.length-1);

                            document.getElementById("KnownStableAreaPoints").value = newKnownStableAreaText;

                        }

                        MapKnownStableArea();
                }


                }



            }



        function FindBoreholePotenitalThawSettlement(theBID) {

            var FoundationTypeList = "";

            var SlabOnGradeArray  = ["Shallow Foundation/Slab on Grade", "../../Help/ShallowFoundation-SlabonGrade.pdf", "../../Images/SlabOnGrade.JPG", 4.0];

            var FoundationTypeArray = [];
            FoundationTypeArray.push(SlabOnGradeArray);

            for (var FIndex = 0; FIndex < FoundationTypeArray.length; FIndex++) {

                var FoundInfo = FoundationTypeArray[FIndex];

                var FoundationType = FoundInfo[0];
                var FoundationHelpFile = FoundInfo[1];
                var FoundationImage = FoundInfo[2];
                var ExpectedHeatFlux = FoundInfo[3];

                FoundationTypeList = FoundationTypeList + FoundationType + "," + FoundationHelpFile + "," + FoundationImage;

                //evaluate L1 condition - is PF close to building site and at what depth
                var L1 = -99;
                var L2 = -99;
                var L3 = -99;
                var Risk = -99;
                var CurModel = document.getElementById("CurrentModel").value;

                var model = null;

                var DepthOfPF = 100000;
                var DepthOfStableLayer = 100000;

                if (CurModel != null && CurModel != "") {
                    model = JSON.parse(CurModel);
                } else {
                    model =  @Html.Raw(Json.Encode(Model));
                }

                if (model.Boreholes.length == 0) {
                    window.alert("There are no boreholes associated with this assessment.  To proceed, you need to upload borehole data.");
                    return;
                }

                if (model.Boreholes.length != 0) {

                    for (var bhindex = 0; bhindex < model.Boreholes.length; bhindex++) {


                        var MinDistBH = model.Boreholes[bhindex];

                        if (MinDistBH.BoreholeID == theBID) {

                            //find the PF depth
                            for (var i = 0; i < MinDistBH.BHSamples.length; i++) {
                                var thisBHS = MinDistBH.BHSamples[i];
                                if (thisBHS.PF_code == "1") {
                                    DepthOfPF = thisBHS.Depth/100;
                                    L1 = 1.0;
                                    break;
                                }
                            }

                            //evaluate L2 condition - is heat flux from foundation likely to thaw PF
                            if (DepthOfPF != 100000) {
                                //we need depth of PF and heat flux potential based on foundation type
                                var ExpectedHeatFlux = ExpectedHeatFlux;
                                var L2 = GetL2(ExpectedHeatFlux, DepthOfPF);
                            }

                            //evaluate L3 condition - will thawing the PF be detrimental
                            //use stability to evaluate this for now.  if stability is 1 in the subPF zone, then thawstrain is high
                            if (MinDistBH != null) {
                                var avgStabilityBelowPF = 0;
                                var NumDepthLayersBelowPF = 0;
                                for (var i = 0; i < MinDistBH.BHSamples.length; i++) {
                                    var thisBHS = MinDistBH.BHSamples[i];
                                    if (thisBHS.PF_code == "1") {
                                        avgStabilityBelowPF = avgStabilityBelowPF + thisBHS.Stability;
                                        NumDepthLayersBelowPF = NumDepthLayersBelowPF + 1;
                                    }

                                    if (thisBHS.Stability >= 4) {
                                        DepthOfStableLayer
                                    }
                                }
                                if (NumDepthLayersBelowPF > 0) {
                                    avgStabilityBelowPF = avgStabilityBelowPF / NumDepthLayersBelowPF;
                                }
                                if (avgStabilityBelowPF > 3) {
                                    L3 = 0.1;
                                } else if (avgStabilityBelowPF > 2) {
                                    L3 = 0.5;
                                } else {
                                    L3 = 1.0;
                                }

                                //depth of stable layer
                                for (var i = 0; i < MinDistBH.BHSamples.length; i++) {
                                    var thisBHS = MinDistBH.BHSamples[i];
                                    if (thisBHS.Stability >= 4) {
                                        DepthOfStableLayer = thisBHS.Depth / 100;
                                        break;
                                    }
                                }

                                //get the total potential subsidence with thaw

                                var totalSubsidence = 0;
                                for (var i = 1; i < MinDistBH.BHSamples.length; i++) {
                                    var LastBHS = MinDistBH.BHSamples[i-1];
                                    var thisBHS = MinDistBH.BHSamples[i];
                                    var thisDepth = thisBHS.Depth - LastBHS.Depth;
                                    totalSubsidence = totalSubsidence + GetExpectedSubsidence(thisDepth, thisBHS.Material, thisBHS.PF_code, thisBHS.GMC);
                                }

                                return totalSubsidence;


                            } else {
                                return null;
                            }

                        
                        }

                    }
                }
            }



        }

        function EvaluatePotentialThawSettlement_SlabOnGrade_AllBoreholes() {

            var FoundationTypeList = "";

            var SlabOnGradeArray  = ["Shallow Foundation/Slab on Grade", "../../Help/ShallowFoundation-SlabonGrade.pdf", "../../Images/SlabOnGrade.JPG", 4.0];

            var FoundationTypeArray = [];
            FoundationTypeArray.push(SlabOnGradeArray);

            for (var FIndex = 0; FIndex < FoundationTypeArray.length; FIndex++) {

                var FoundInfo = FoundationTypeArray[FIndex];

                var FoundationType = FoundInfo[0];
                var FoundationHelpFile = FoundInfo[1];
                var FoundationImage = FoundInfo[2];
                var ExpectedHeatFlux = FoundInfo[3];

                FoundationTypeList = FoundationTypeList + FoundationType + "," + FoundationHelpFile + "," + FoundationImage;

                //evaluate L1 condition - is PF close to building site and at what depth
                var L1 = -99;
                var L2 = -99;
                var L3 = -99;
                var Risk = -99;
                var CurModel = document.getElementById("CurrentModel").value;

                var model = null;

                var DepthOfPF = 100000;
                var DepthOfStableLayer = 100000;

                if (CurModel != null && CurModel != "") {
                    model = JSON.parse(CurModel);
                } else {
                    model =  @Html.Raw(Json.Encode(Model));
                }

                if (model.Boreholes.length == 0) {
                    window.alert("There are no boreholes associated with this assessment.  To proceed, you need to upload borehole data.");
                    return;
                }

                if (model.Boreholes.length != 0) {

                    for (var bhindex = 0; bhindex < model.Boreholes.length; bhindex++) {


                        var MinDistBH = model.Boreholes[bhindex];

                        //find the PF depth
                        for (var i = 0; i < MinDistBH.BHSamples.length; i++) {
                            var thisBHS = MinDistBH.BHSamples[i];
                            if (thisBHS.PF_code == "1") {
                                DepthOfPF = thisBHS.Depth/100;
                                L1 = 1.0;
                                break;
                            }
                        }

                        //evaluate L2 condition - is heat flux from foundation likely to thaw PF
                        if (DepthOfPF != 100000) {
                            //we need depth of PF and heat flux potential based on foundation type
                            var ExpectedHeatFlux = ExpectedHeatFlux;
                            var L2 = GetL2(ExpectedHeatFlux, DepthOfPF);
                        }

                        //evaluate L3 condition - will thawing the PF be detrimental
                        //use stability to evaluate this for now.  if stability is 1 in the subPF zone, then thawstrain is high
                        if (MinDistBH != null) {
                            var avgStabilityBelowPF = 0;
                            var NumDepthLayersBelowPF = 0;
                            for (var i = 0; i < MinDistBH.BHSamples.length; i++) {
                                var thisBHS = MinDistBH.BHSamples[i];
                                if (thisBHS.PF_code == "1") {
                                    avgStabilityBelowPF = avgStabilityBelowPF + thisBHS.Stability;
                                    NumDepthLayersBelowPF = NumDepthLayersBelowPF + 1;
                                }

                                if (thisBHS.Stability >= 4) {
                                    DepthOfStableLayer
                                }
                            }
                            if (NumDepthLayersBelowPF > 0) {
                                avgStabilityBelowPF = avgStabilityBelowPF / NumDepthLayersBelowPF;
                            }
                            if (avgStabilityBelowPF > 3) {
                                L3 = 0.1;
                            } else if (avgStabilityBelowPF > 2) {
                                L3 = 0.5;
                            } else {
                                L3 = 1.0;
                            }

                            //depth of stable layer
                            for (var i = 0; i < MinDistBH.BHSamples.length; i++) {
                                var thisBHS = MinDistBH.BHSamples[i];
                                if (thisBHS.Stability >= 4) {
                                    DepthOfStableLayer = thisBHS.Depth / 100;
                                    break;
                                }
                            }

                            //get the total potential subsidence with thaw
                            var totalSubsidence = 0;
                            for (var i = 1; i < MinDistBH.BHSamples.length; i++) {
                                var LastBHS = MinDistBH.BHSamples[i-1];
                                var thisBHS = MinDistBH.BHSamples[i];
                                var thisDepth = thisBHS.Depth - LastBHS.Depth;
                                totalSubsidence = totalSubsidence + GetExpectedSubsidence(thisDepth, thisBHS.Material, thisBHS.PF_code, thisBHS.GMC);
                            }

                            MinDistBH.PotentialThawSettlement = totalSubsidence;
                        }

                    }
                }
            }

        }

        function RunBuildingSiteAssessment() {

            var FoundationTypeList = "";

            var SlabOnGradeArray  = ["Shallow Foundation/Slab on Grade", "../../Help/ShallowFoundation-SlabonGrade.pdf", "../../Images/SlabOnGrade.JPG", 4.0];

            var FoundationTypeArray = [];
            FoundationTypeArray.push(SlabOnGradeArray);

            for (var FIndex = 0; FIndex < FoundationTypeArray.length; FIndex++) {

                var FoundInfo = FoundationTypeArray[FIndex];

                var FoundationType = FoundInfo[0];
                var FoundationHelpFile = FoundInfo[1];
                var FoundationImage = FoundInfo[2];
                var ExpectedHeatFlux = FoundInfo[3];

                FoundationTypeList = FoundationTypeList + FoundationType + "," + FoundationHelpFile + "," + FoundationImage;

                //evaluate L1 condition - is PF close to building site and at what depth
                var L1 = -99;
                var L2 = -99;
                var L3 = -99;
                var Risk = -99;
                var CurModel = document.getElementById("CurrentModel").value;

                var model = null;

                var DepthOfPF = 100000;
                var DepthOfStableLayer = 100000;

                if (CurModel != null && CurModel != "") {
                    model = JSON.parse(CurModel);
                } else {
                    model =  @Html.Raw(Json.Encode(Model));
                }

                //get the current building site coordinates
                var BSC = document.getElementById("BuildingSiteCoordinates");

                if (BSC.value.length == 0){
                    if (model.SiteLongitude != null) {
                        coords = [];
                        coords.push(model.SiteLongitude);
                        coords.push(model.SiteLatitude);
                        document.getElementById("BuildingSiteCoordinates").value = coords;
                        var BSC = document.getElementById("BuildingSiteCoordinates");
                    }
                }



                if (BSC.value.length == 0) {
                    window.alert("No building site has been specified.  To proceed with foundation type assessment, you must specify a building site location.");
                    return;
                }

                if (BSC.value.length > 0 && model.Boreholes.length != 0) {

                    BSCoords = BSC.value.split(",");
                    var BSLongitude = Number(BSCoords[0]);
                    var BSLatitude = Number(BSCoords[1]);

                    if (model.Boreholes.length == 0) {
                        window.alert("There are no boreholes associated with this assessment.  To proceed, you need to upload borehole data.");
                        return;
                    }

                    var MinDist = 100000;
                    var MinDistBH = null;
                    for (var i = 0; i < model.Boreholes.length; i++) {
                        var thisBorehole = model.Boreholes[i];
                        //determine how far the borehole is from the building site
                        var thisDist = Math.pow(Math.pow(thisBorehole.Longitude - BSLongitude, 2) + Math.pow(thisBorehole.Latitude - BSLatitude, 2), 0.5);
                        if (thisDist < MinDist) {
                            MinDist = thisDist;
                            MinDistBH = thisBorehole;
                        }
                    }

                    //if mininum distance is greater than 0.001 of a degree (about 50m in the Arctic Circle), then say boreholes are too far
                    if (MinDist > 0.001) {
                        window.alert("You don't have a borehole close to the planned building site.  To proceed, you need to add boring data for at least one borehole within 20 m from the building site.");
                        return;
                    } else {
                        //find the PF depth
                        for (var i = 0; i < MinDistBH.BHSamples.length; i++) {
                            var thisBHS = MinDistBH.BHSamples[i];
                            if (thisBHS.PF_code == "1") {
                                DepthOfPF = thisBHS.Depth/100;
                                L1 = 1.0;
                                break;
                            }
                        }
                    }

                    //evaluate L2 condition - is heat flux from foundation likely to thaw PF
                    if (DepthOfPF != 100000) {
                        //we need depth of PF and heat flux potential based on foundation type
                        var ExpectedHeatFlux = ExpectedHeatFlux;
                        var L2 = GetL2(ExpectedHeatFlux, DepthOfPF);
                    }

                    //evaluate L3 condition - will thawing the PF be detrimental
                    //use stability to evaluate this for now.  if stability is 1 in the subPF zone, then thawstrain is high
                    if (MinDistBH != null) {
                        var avgStabilityBelowPF = 0;
                        var NumDepthLayersBelowPF = 0;
                        for (var i = 0; i < MinDistBH.BHSamples.length; i++) {
                            var thisBHS = MinDistBH.BHSamples[i];
                            if (thisBHS.PF_code == "1") {
                                avgStabilityBelowPF = avgStabilityBelowPF + thisBHS.Stability;
                                NumDepthLayersBelowPF = NumDepthLayersBelowPF + 1;
                            }

                            if (thisBHS.Stability >= 4) {
                                DepthOfStableLayer
                            }
                        }
                        if (NumDepthLayersBelowPF > 0) {
                            avgStabilityBelowPF = avgStabilityBelowPF / NumDepthLayersBelowPF;
                        }
                        if (avgStabilityBelowPF > 3) {
                            L3 = 0.1;
                        } else if (avgStabilityBelowPF > 2) {
                            L3 = 0.5;
                        } else {
                            L3 = 1.0;
                        }

                        //depth of stable layer
                        for (var i = 0; i < MinDistBH.BHSamples.length; i++) {
                            var thisBHS = MinDistBH.BHSamples[i];
                            if (thisBHS.Stability >= 4) {
                                DepthOfStableLayer = thisBHS.Depth / 100;
                                break;
                            }
                        }

                        //add layers to table

                        //get the total potential subsidence with thaw
                        var totalSubsidence = 0;
                        for (var i = 1; i < MinDistBH.BHSamples.length; i++) {
                            var LastBHS = MinDistBH.BHSamples[i-1];
                            var thisBHS = MinDistBH.BHSamples[i];
                            var thisDepth = thisBHS.Depth - LastBHS.Depth;
                            totalSubsidence = totalSubsidence + GetExpectedSubsidence(thisDepth, thisBHS.Material, thisBHS.PF_code, thisBHS.GMC);
                        }

                        var canvas = document.getElementById("PlaceBuildingSiteResultCanvas");
                        var context = canvas.getContext("2d");
                        context.clearRect(0, 0, canvas.width, canvas.height);

                        var thisTop = 60;
                        var thisTopThaw = thisTop + totalSubsidence/3;

                        for (var i = 0; i < MinDistBH.BHSamples.length; i++) {
                            var thisBHS = MinDistBH.BHSamples[i];
                            var nextBHS = MinDistBH.BHSamples[i+1];
                            var thisLayerDepth = 0;
                            var thisLayerDepthThaw = 0;
                            if (thisBHS != null && nextBHS != null) {

                                var thisCTX = canvas.getContext("2d");
                                var thisCTXThaw = canvas.getContext("2d");

                                while (thisBHS.Material == nextBHS.Material) {
                                    var thisDepth = nextBHS.Depth - thisBHS.Depth;
                                    var thisBHSDepthWithSubsidence = thisDepth - GetExpectedSubsidence(thisDepth, thisBHS.Material, thisBHS.PF_code, thisBHS.GMC);
                                    thisLayerDepth = thisLayerDepth + thisDepth;
                                    thisLayerDepthThaw = thisLayerDepthThaw + thisBHSDepthWithSubsidence;

                                    i = i + 1;
                                    thisBHS = MinDistBH.BHSamples[i];
                                    nextBHS = MinDistBH.BHSamples[i+1];
                                    if (nextBHS == null || thisBHS == null) {
                                        break;
                                    }
                                }

                                if (thisBHS != null) {
                                    var theColor= "Red";
                                    if (thisBHS.Material == "SW") {
                                        theColor = "Indigo";
                                    } else if (thisBHS.Material == "SP") {
                                        theColor = "Red";
                                    } else if (thisBHS.Material == "SM") {
                                        theColor = "Yellow";
                                    } else if (thisBHS.Material == "ML") {
                                        theColor = "Gray";
                                    } else if (thisBHS.Material == "Pt") {
                                        theColor = "Green";
                                    } else if (thisBHS.Material == "GW") {
                                        theColor = "Brown";
                                    } else if (thisBHS.Material == "ICE") {
                                        theColor = "Blue";
                                    } else  {
                                        theColor = "Red";
                                    }

                                    thisCTX.fillStyle = theColor;
                                    thisCTX.fillRect(50,thisTop,150,thisLayerDepth/3);

                                    thisTop = thisTop + thisLayerDepth/3;


                                    thisCTXThaw.fillStyle = theColor;
                                    thisCTXThaw.fillRect(280, thisTopThaw, 150, thisLayerDepthThaw/3);

                                    thisTopThaw = thisTopThaw + thisLayerDepthThaw/3;

                                    //var row = "<tr bgcolor=" + theColor + " height=" + thisLayerDepth / 3 + ">";
                                    ////row = row.concat("<td>" + thisBHS.Material + "</td>");
                                    //row = row.concat("<td>" + "" + "</td>");
                                    //row = row.concat("</tr>");
                                    //DataTable = DataTable.concat(row);
                                } else {
                                    break;
                                }
                            } else {
                                break;
                            }

                        }

                    }

                    //add plot depth lines and titles, and legend

                    thisTop = 60;

                    var ctx_lineSurface = canvas.getContext("2d");
                    ctx_lineSurface.fillStyle = "black";
                    ctx_lineSurface.fillRect(10,thisTop,480,0.5);

                    for (var i = 0; i < 7; i++) {
                        var ctx_line = canvas.getContext("2d");
                        ctx_line.fillStyle = "gray";
                        ctx_line.fillRect(10,thisTop + 33 * i,480,0.5);

                        var ctx_label = canvas.getContext("2d");
                        ctx_label.textAlign="center";
                        ctx_label.font="8px Verdana";
                        ctx_label.fillStyle = "gray";
                        ctx_label.fillText(i + "m", 10, thisTop + (33 * i) - 5);
                    }


                    var ctx = canvas.getContext("2d");
                    ctx.textAlign="center";
                    ctx.font="12px Verdana";
                    ctx.fillStyle = "black";
                    ctx.fillText("Current Soil Profile",130,30);

                    var ctx2 = canvas.getContext("2d");
                    ctx2.textAlign="center";
                    ctx2.font="12px Verdana";
                    ctx2.fillStyle = "black";
                    ctx2.fillText("Profile After Thaw with",350,30);

                    var ctx3 = canvas.getContext("2d");
                    ctx3.textAlign="center";
                    ctx3.font="12px Verdana";
                    ctx3.fillStyle = "black";
                    ctx3.fillText("Heated Slab on Grade Foundation",350,50);

                    var ctx4 = canvas.getContext("2d");
                    ctx4.textAlign="center";
                    ctx4.font="12px Verdana";
                    ctx4.fillStyle = "black";
                    ctx4.fillText("Potential settlement",250,360);

                    var ctx5 = canvas.getContext("2d");
                    ctx5.textAlign="center";
                    ctx5.font="12px Verdana";
                    ctx5.fillStyle = "black";
                    ctx5.fillText(totalSubsidence.toFixed(0) + " cm",250,380);

                    //legend
                    AddSoilLegendItem("SW", 280, 10, "Indigo");
                    AddSoilLegendItem("SP", 280, 50, "Red");
                    AddSoilLegendItem("SM", 280, 90, "Yellow");
                    AddSoilLegendItem("ML", 280, 130, "Gray");
                    AddSoilLegendItem("Pt", 280, 170, "Green");
                    AddSoilLegendItem("GW", 280, 210, "Brown");
                    AddSoilLegendItem("ICE", 280, 250, "Blue");

                    if (L1 != -99 && L2 != -99 && L3 != -99) {
                        Risk = L1 * L2 * L3;
                    }

                    //evaluate cost for the foundation
                    //we need to the depth to the stable layer
                    var CostCat = "Moderate";
                    var CostNote = "";
                     if (FoundationType == "Shallow Foundation/Slab on Grade") {
                        CostCat = "Low";
                        CostNote = "Slab on grade is the lowest cost foundation type but it will most often experience foundation issues in permafrost.";
                    }


                }

                FoundationTypeList = FoundationTypeList + "," + DepthOfPF + "," + L1 + "," + L2 + "," + L3 + "," + Risk + "," + CostCat + "," + CostNote +  ";"
            }

            //DataTable = DataTable.concat("</table></div></td></tr>")

            //table.append(DataTable);

            //document.getElementById("PlaceBuildingSiteResult").innerHTML = FoundationTypeList;


        }

        function AddSoilLegendItem(theLabel, theTop, theLeft, theColor) {

            var canvas = document.getElementById("PlaceBuildingSiteResultCanvas");

            var ctxSoil = canvas.getContext("2d");
            ctxSoil.fillStyle = theColor;
            ctxSoil.fillRect(theLeft,theTop,30,20);
            var cSoilLabel = canvas.getContext("2d");
            cSoilLabel.textAlign="center";
            cSoilLabel.font="10px Verdana";
            cSoilLabel.fillStyle = "black";
            cSoilLabel.fillText(theLabel,theLeft + 15,theTop + 30);

        }

        function GetExpectedSubsidence(theLayerDepth, theSoilType, thePFState, theGMC) {

            var PotentialSubsidence_Thaw = 0;
            var PotentialSubsidence_Material = theLayerDepth * 0.01;

            if (theSoilType == "ICE") {
                PotentialSubsidence_Thaw = theLayerDepth;

            } else if (Number(thePFState) == 1) {
                if(Number(theGMC) > 0) {
                    //PotentialSubsidence_Thaw = theLayerDepth * 1/Number(theGMC); //basic guess

                    PotentialSubsidence_Thaw = theLayerDepth *  (102.75 - 5480.75/(theGMC + 27.43))/100.0; //from Frozen Ground Engineering - Johnson et. al, 1984 ASCE

                } else {
                    PotentialSubsidence_Thaw = 0;
                }

            } else{
                PotentialSubsidence_Thaw = 0;
            }

            var thisExpectedSubsidence = PotentialSubsidence_Thaw + PotentialSubsidence_Material;
            if (PotentialSubsidence_Thaw < 0) {
                PotentialSubsidence_Thaw = 0;
            }

            return PotentialSubsidence_Thaw + PotentialSubsidence_Material;

        }

        function RunFoundationTypeAssessment() {

            //work through each foundation type and evaluate against the current assessment
            var FoundationTypeList = "";

            var SlabOnGradeArray  = ["Shallow Foundation/Slab on Grade", "../../Help/ShallowFoundation-SlabonGrade.pdf", "../../Images/SlabOnGrade.JPG", 4.0];
            var EndBearingArray  = ["End Bearing Piles", "../../Help/EndBearingPiles.pdf" , "../../Images/EndBearingPile.png", 4.0];
            var AdFreezeArray  = ["Adfreeze Piles", "../../Help/AdfreezePiles.pdf", "../../Images/AdFreezePile.png", 4.0];
            var OverExcavateArray  = ["Over-Excavate", "../../Help/OverExcavation.pdf", "../../Images/DeepExcavation.jpg", 4.0];
            var RefrigerateArray  = ["Refrigerate", "../../Help/RefrigeratedFoundations.pdf", "../../Images/AdfreezePile.jpg", 4.0];

            var FoundationTypeArray = [];
            FoundationTypeArray.push(SlabOnGradeArray);
            FoundationTypeArray.push(EndBearingArray);
            FoundationTypeArray.push(AdFreezeArray);
            FoundationTypeArray.push(OverExcavateArray);
            FoundationTypeArray.push(RefrigerateArray);

            for (var FIndex = 0; FIndex < FoundationTypeArray.length; FIndex++) {

                var FoundInfo = FoundationTypeArray[FIndex];

                var FoundationType = FoundInfo[0];
                var FoundationHelpFile = FoundInfo[1];
                var FoundationImage = FoundInfo[2];
                var ExpectedHeatFlux = FoundInfo[3];

                FoundationTypeList = FoundationTypeList + FoundationType + "," + FoundationHelpFile + "," + FoundationImage;

                //evaluate L1 condition - is PF close to building site and at what depth
                var L1 = -99;
                var L2 = -99;
                var L3 = -99;
                var Risk = -99;
                var CurModel = document.getElementById("CurrentModel").value;

                var model = null;

                var DepthOfPF = 100000;
                var DepthOfStableLayer = 100000;

                if (CurModel != null && CurModel != "") {
                    model = JSON.parse(CurModel);
                } else {
                    model =  @Html.Raw(Json.Encode(Model));
                }

                //get the current building site coordinates
                var BSC = document.getElementById("BuildingSiteCoordinates");

                if (BSC.value.length == 0) {
                    window.alert("No building site has been specified.  To proceed with foundation type assessment, you must specify a building site location.");
                    return;
                }

                if (BSC.value.length > 0) {
                    BSCoords = BSC.value.split(",");
                    var BSLongitude = Number(BSCoords[0]);
                    var BSLatitude = Number(BSCoords[1]);

                    if (model.Boreholes.length == 0) {
                        window.alert("There are no boreholes associated with this assessment.  To proceed, you need to upload borehole data.");
                        return;
                    }

                    var MinDist = 100000;
                    var MinDistBH = null;
                    for (var i = 0; i < model.Boreholes.length; i++) {
                        var thisBorehole = model.Boreholes[i];
                        //determine how far the borehole is from the building site
                        var thisDist = Math.pow(Math.pow(thisBorehole.Longitude - BSLongitude, 2) + Math.pow(thisBorehole.Latitude - BSLatitude, 2), 0.5);
                        if (thisDist < MinDist) {
                            MinDist = thisDist;
                            MinDistBH = thisBorehole;
                        }
                    }

                    if (MinDist > 0.001) {
                        window.alert("You don't have a borehole close to the planned building site.  To proceed, you need to add boring data for at least one borehole within 20 m from the building site.");
                        return;
                    } else {
                        //find the PF depth
                        for (var i = 0; i < MinDistBH.BHSamples.length; i++) {
                            var thisBHS = MinDistBH.BHSamples[i];
                            if (thisBHS.PF_code == "1") {
                                DepthOfPF = thisBHS.Depth/100;
                                L1 = 1.0;
                                break;
                            }
                        }
                    }

                    //evaluate L2 condition - is heat flux from foundation likely to thaw PF
                    if (DepthOfPF != 100000) {
                        //we need depth of PF and heat flux potential based on foundation type
                        var ExpectedHeatFlux = ExpectedHeatFlux;
                        var L2 = GetL2(ExpectedHeatFlux, DepthOfPF);

                        //evaluate the likely subsidence in the top 3m given this foundationType
                        var totalSubsidence = 0;
                        var totalSubsidence_3m = 0;
                        var totalDepth = 0;
                        for (var i = 1; i < MinDistBH.BHSamples.length; i++) {
                            var LastBHS = MinDistBH.BHSamples[i-1];
                            var thisBHS = MinDistBH.BHSamples[i];
                            var thisDepth = thisBHS.Depth - LastBHS.Depth;

                            var AdjustedSubsidence = 0;
                            if (model.StructureHeated == true) {
                                var FullThawSubsidence  = GetExpectedSubsidence(thisDepth, thisBHS.Material, thisBHS.PF_code, thisBHS.GMC);
                                var HeatFluxReductionFactor = (4.0 - ExpectedHeatFlux)/4.0;  //adjust down to account for less heat flux from the foundation
                                AdjustedSubsidence = (1.0 - HeatFluxReductionFactor) * FullThawSubsidence;
                                if (AdjustedSubsidence < 0) {
                                    AdjustedSubidence = 0;
                                }
                            } else {
                                AdjustedSubsidence = 0;
                            }

                            totalSubsidence = totalSubsidence + AdjustedSubsidence;
                            if (thisBHS.Depth <= 300) {
                                totalSubsidence_3m = totalSubsidence;
                            }
                        }



                        //evaluate the stability of the layers below 3m
                        totalDepth = 0;
                        var DepthOfPF_Below3m = -1000000;
                        for (var i = 0; i < MinDistBH.BHSamples.length; i++) {
                            var thisBHS = MinDistBH.BHSamples[i];
                            if (thisBHS.Depth > 300) {
                                if (thisBHS.Stability >= 4) {
                                    DepthOfPF_Below3m = thisBHS.Depth/100;
                                    break;
                                }
                            }
                        }
                     

                    }

                    //evaluate L3 condition - will thawing the PF be detrimental
                    //use stability to evaluate this for now.  if stability is 1 in the subPF zone, then thawstrain is high
                    if (MinDistBH != null) {
                        var avgStabilityBelowPF = 0;
                        var NumDepthLayersBelowPF = 0;
                        for (var i = 0; i < MinDistBH.BHSamples.length; i++) {
                            var thisBHS = MinDistBH.BHSamples[i];
                            if (thisBHS.PF_code == "1") {
                                avgStabilityBelowPF = avgStabilityBelowPF + thisBHS.Stability;
                                NumDepthLayersBelowPF = NumDepthLayersBelowPF + 1;
                            }

                            if (thisBHS.Stability >= 4) {
                                DepthOfStableLayer
                            }
                        }
                        if (NumDepthLayersBelowPF > 0) {
                            avgStabilityBelowPF = avgStabilityBelowPF / NumDepthLayersBelowPF;
                        }
                        if (avgStabilityBelowPF > 3) {
                            L3 = 0.1;
                        } else if (avgStabilityBelowPF > 2) {
                            L3 = 0.5;
                        } else {
                            L3 = 1.0;
                        }

                        //depth of stable layer
                        for (var i = 0; i < MinDistBH.BHSamples.length; i++) {
                            var thisBHS = MinDistBH.BHSamples[i];
                            if (thisBHS.Stability >= 4) {
                                DepthOfStableLayer = thisBHS.Depth / 100;
                                break;
                            }
                        }

                    }

                    if (L1 != -99 && L2 != -99 && L3 != -99) {
                        Risk = L1 * L2 * L3;
                    }

                    //evaluate cost for the foundation
                    //we need to the depth to the stable layer
                    var CostCat = "Moderate";
                    var CostNote = "";
                    if (FoundationType == "Over-Excavate") {
                        CostCat = "High";

                        if (DepthOfStableLayer != 100000) {
                            var VolExcavate = model.StructureLength * model.StructureWidth * DepthOfStableLayer;
                            CostNote = "You will have to excavate approximately " + VolExcavate + " cu.m down to the stable layer.";
                            if (DepthOfStableLayer > 2) {
                                CostCat = "Very High";
                            }
                        }

                    } else if (FoundationType == "End Bearing Piles") {
                        CostCat = "Moderate";
                        if (DepthOfStableLayer != 100000) {
                            var VolExcavate = model.Width * model.Length * DepthOfStableLayer;
                            CostNote = "The piles will have to extend approximately " + DepthOfStableLayer + " m down to the stable layer.";
                            if (DepthOfStableLayer >= 4) {
                                CostCat = "High";
                            }
                        }

                    } else if (FoundationType == "Refrigerate") {
                        CostCat = "Very High";
                        CostNote = "Active refrigeration is a very high cost approach, particularly active refrigeration which has very high yearly maintenance costs over the life of the structure.";

                    } else if (FoundationType == "Shallow Foundation/Slab on Grade") {
                        CostCat = "Low";
                        CostNote = "Slab on grade is the lowest cost foundation type but it will most often experience foundation issues in permafrost.";

                    } else if (FoundationType == "Adfreeze Piles") {
                        CostCat = "High";
                        if (DepthOfPF != 100000) {
                            var VolExcavate = model.Width * model.Length * DepthOfStableLayer;
                            var AdFreezeDepth = Math.min(DepthOfPF + 1, DepthOfStableLayer-0.05);
                            CostNote = "The piles will have to extend approximately " + AdFreezeDepth + " m down so that they are 1m into the permanent ice layer.";
                            if (DepthOfPF >= 4) {
                                CostCat = "Very High";
                            }
                        }

                    }


                }

                FoundationTypeList = FoundationTypeList + "," + DepthOfPF + "," + L1 + "," + L2 + "," + L3 + "," + Risk + "," + CostCat + "," + CostNote +  "," + totalSubsidence_3m + ","  +  DepthOfPF_Below3m +  ";"
            }

            //FoundationTypeList = FoundationTypeList + "End Bearing Piles" + "," + "../../Help/EndBearingPiles.pdf" + "," + "../../Images/EndBearingPile.png" + ",0,0,0,0,0" + ";"
            //FoundationTypeList = FoundationTypeList + "Adfreeze Piles" + "," + "../../Help/AdfreezePiles.pdf" + "," + "../../Images/AdFreezePile.png" + ",0,0,0,0,0" + ";"
            //FoundationTypeList = FoundationTypeList + "Over-Excavate" + "," + "../../Help/OverExcavation.pdf" + "," + "../../Images/DeepExcavation.jpg" + ",0,0,0,0,0" + ";"
            //FoundationTypeList = FoundationTypeList + "Refrigerate" + "," + "../../Help/RefrigeratedFoundations.pdf" + "," + "../../Images/AdfreezePile.jpg" + ",0,0,0,0,0" + ";"

            document.getElementById("FoundationAssessmentResult").value = FoundationTypeList;



        }


        function GetL2(ExpectedHeatFlux, DepthOfPF) {

            var L2 = -99;
            if (ExpectedHeatFlux < 0.5  && DepthOfPF < 1) {
                L2 = 0.1;
            } else if (ExpectedHeatFlux < 1 && DepthOfPF < 1) {
                L2 = 0.2;
            } else if (ExpectedHeatFlux < 1.5 && DepthOfPF < 1) {
                L2 = 0.3;
            } else if (ExpectedHeatFlux < 2.0 && DepthOfPF < 1) {
                L2 = 0.4;
            } else if (ExpectedHeatFlux < 2.5 && DepthOfPF < 1) {
                L2 = 0.5;
            } else if (ExpectedHeatFlux < 3.0 && DepthOfPF < 1) {
                L2 = 0.6;
            } else if (ExpectedHeatFlux < 3.5 && DepthOfPF < 1) {
                L2 = 0.7;
            } else if (ExpectedHeatFlux < 4.0 && DepthOfPF < 1) {
                L2 = 0.8;
            } else if (ExpectedHeatFlux < 4.5 && DepthOfPF < 1) {
                L2 = 0.9;
            } else if (ExpectedHeatFlux < 5.0 && DepthOfPF < 1) {
                L2 = 1.0;

            } else if (ExpectedHeatFlux < 0.5  && DepthOfPF < 2) {
                L2 = 0.075;
            } else if (ExpectedHeatFlux < 1 && DepthOfPF < 2) {
                L2 = 0.167;
            } else if (ExpectedHeatFlux < 1.5 && DepthOfPF < 2) {
                L2 = 0.258;
            } else if (ExpectedHeatFlux < 2.0 && DepthOfPF < 2) {
                L2 = 0.35;
            } else if (ExpectedHeatFlux < 2.5 && DepthOfPF < 2) {
                L2 = 0.44;
            } else if (ExpectedHeatFlux < 3.0 && DepthOfPF < 2) {
                L2 = 0.53;
            } else if (ExpectedHeatFlux < 3.5 && DepthOfPF < 2) {
                L2 = 0.63;
            } else if (ExpectedHeatFlux < 4.0 && DepthOfPF < 2) {
                L2 = 0.72;
            } else if (ExpectedHeatFlux < 4.5 && DepthOfPF < 2) {
                L2 = 0.81;
            } else if (ExpectedHeatFlux < 5.0 && DepthOfPF < 2) {
                L2 = 0.9;

            } else if (ExpectedHeatFlux < 0.5  && DepthOfPF < 3) {
                L2 = 0.05;
            } else if (ExpectedHeatFlux < 1 && DepthOfPF < 3) {
                L2 = 0.12;
            } else if (ExpectedHeatFlux < 1.5 && DepthOfPF < 3) {
                L2 = 0.19;
            } else if (ExpectedHeatFlux < 2.0 && DepthOfPF < 3) {
                L2 = 0.27;
            } else if (ExpectedHeatFlux < 2.5 && DepthOfPF < 3) {
                L2 = 0.34;
            } else if (ExpectedHeatFlux < 3.0 && DepthOfPF < 3) {
                L2 = 0.41;
            } else if (ExpectedHeatFlux < 3.5 && DepthOfPF < 3) {
                L2 = 0.48;
            } else if (ExpectedHeatFlux < 4.0 && DepthOfPF < 3) {
                L2 = 0.56;
            } else if (ExpectedHeatFlux < 4.5 && DepthOfPF < 3) {
                L2 = 0.63;
            } else if (ExpectedHeatFlux < 5.0 && DepthOfPF < 3) {
                L2 = 0.7;

            } else if (ExpectedHeatFlux < 0.5  && DepthOfPF < 4) {
                L2 = 0.025;
            } else if (ExpectedHeatFlux < 1 && DepthOfPF < 4) {
                L2 = 0.089;
            } else if (ExpectedHeatFlux < 1.5 && DepthOfPF < 4) {
                L2 = 0.153;
            } else if (ExpectedHeatFlux < 2.0 && DepthOfPF < 4) {
                L2 = 0.217;
            } else if (ExpectedHeatFlux < 2.5 && DepthOfPF < 4) {
                L2 = 0.281;
            } else if (ExpectedHeatFlux < 3.0 && DepthOfPF < 4) {
                L2 = 0.344;
            } else if (ExpectedHeatFlux < 3.5 && DepthOfPF < 4) {
                L2 = 0.408;
            } else if (ExpectedHeatFlux < 4.0 && DepthOfPF < 4) {
                L2 = 0.472;
            } else if (ExpectedHeatFlux < 4.5 && DepthOfPF < 4) {
                L2 = 0.536;
            } else if (ExpectedHeatFlux < 5.0 && DepthOfPF < 4) {
                L2 = 0.6;

            } else if (ExpectedHeatFlux < 0.5  && DepthOfPF < 5) {
                L2 = 0.0;
            } else if (ExpectedHeatFlux < 1 && DepthOfPF < 5) {
                L2 = 0.05;
            } else if (ExpectedHeatFlux < 1.5 && DepthOfPF < 5) {
                L2 = 0.1;
            } else if (ExpectedHeatFlux < 2.0 && DepthOfPF < 5) {
                L2 = 0.15;
            } else if (ExpectedHeatFlux < 2.5 && DepthOfPF < 5) {
                L2 = 0.2;
            } else if (ExpectedHeatFlux < 3.0 && DepthOfPF < 5) {
                L2 = 0.25;
            } else if (ExpectedHeatFlux < 3.5 && DepthOfPF < 5) {
                L2 = 0.3;
            } else if (ExpectedHeatFlux < 4.0 && DepthOfPF < 5) {
                L2 = 0.35;
            } else if (ExpectedHeatFlux < 4.5 && DepthOfPF < 5) {
                L2 = 0.4;
            } else if (ExpectedHeatFlux < 5.0 && DepthOfPF < 5) {
                L2 = 0.45;
            }

            return L2;

        }

            function ShowFoundationTypeAssessment() {

                //first check to make sure that the all required inputs are entered and pre-analysis has been done

                HandleToolVisibility("FoundationTypeResults");

                var AssessmentMain = document.getElementById("AssessmentResultsMain");
                AssessmentMain.style.visibility = 'hidden';

                var AssessmentSummary = document.getElementById("AssessmentResultsSummary");
                AssessmentSummary.style.visibility = 'hidden';

                var $modalOverlay = $('#modalOverlay');
                $modalOverlay.stop().fadeTo(500,1);

                var BestFoundationType = "";
                var BestFoundationTypeScore = 10;

                //get the results, which are held in the hidden html variable called FoundationAssessmentResult
                var AssessmentResults = document.getElementById("FoundationAssessmentResult");
                var AssResultsArray = AssessmentResults.value.split(";");

                var FTableHTMLRow1 = "<tr><td id='tdOdd' width='360px'>Findings</td>";
                var FTableHTMLRow2 = "<tr><td id='tdOdd'></td>";
                var FTableHTMLRow3 = "<tr><td id='tdOdd'>Permafrost Present?</td>";
                var FTableHTMLRow4 = "<tr><td id='tdOdd'>Thaw Potential</td>";
                var FTableHTMLRow5 = "<tr><td id='tdOdd'>Detrimental to Foundation if thawed?</td>";
                var FTableHTMLRow6 = "<tr><td id='tdOdd'>Total Risk</td>";
                var FTableHTMLRow7 = "<tr><td id='tdOdd'>Cost</td>";
                var FTableHTMLRow8 = "<tr><td id='tdOdd'>Notes</td>";
                var thisSubsidence_3m = 0;
                var thisStableDepth_3m = 0;

                for (var i = 0; i < AssResultsArray.length - 1; i++) {
                    var thisFoundTypeResult = AssResultsArray[i];
                    var thisFTypeArray = thisFoundTypeResult.split(",");
                    var thisFoundType = thisFTypeArray[0];
                    var thisFTypeHelpFile = thisFTypeArray[1];
                    var thisFTypeImage = thisFTypeArray[2];
                    var thisDepthOfPF = thisFTypeArray[3];
                    var thisL1 = thisFTypeArray[4];
                    var thisL2 = thisFTypeArray[5];
                    var thisL3 = thisFTypeArray[6];
                    var thisRisk = thisFTypeArray[7];
                    var thisCostCat = thisFTypeArray[8];
                    var thisCostNote = thisFTypeArray[9];


                    if (thisFoundType == "Shallow Foundation/Slab on Grade") {
                        thisSubsidence_3m = Number(thisFTypeArray[10]);
                        thisStableDepth_3m = Number(thisFTypeArray[11]);
                    }


                    var thisCostCatScore;
                    if (thisCostCat == "Very High") {
                        thisCostCatScore = 4;
                    } else if (thisCostCat == "High") {
                        thisCostCatScore = 3;
                    } else if (thisCostCat == "Moderate") {
                        thisCostCatScore = 2;
                    } else {
                        thisCostCatScore = 1;
                    }

                    var thisRiskCatScore;
                    var thisFTScore = 12;

                    FTableHTMLRow1 = FTableHTMLRow1 + "<td id='tdEven' width='120px'><a href=\"" + thisFTypeHelpFile + "\" target=\"_blank\">" + thisFoundType + "</a></td>";
                    FTableHTMLRow2 = FTableHTMLRow2 + "<td id ='tdEven'><img src='" + thisFTypeImage + "' width='100%'>" + "</td>"

                    if (thisL1 > 0) {
                        if (thisL1 > 0.8) {
                            FTableHTMLRow3 = FTableHTMLRow3 + "<td id = 'tdEven'>" + "Very Likely" + "<br> Depth: " + thisDepthOfPF + " m" + "</td>"
                        } else if (thisL1 > 0.4) {
                            FTableHTMLRow3 = FTableHTMLRow3 + "<td id = 'tdEven'>" + "Likely" + "<br> Depth: " + thisDepthOfPF + " m" + "</td>"
                        } else {
                            FTableHTMLRow3 = FTableHTMLRow3 + "<td id = 'tdEven'>" + "Possible" + "<br> Depth: " + thisDepthOfPF + " m" + "</td>"
                        }
                    } else {
                        FTableHTMLRow3 = FTableHTMLRow3 + "<td id = 'tdEven'>" + "Not Likely" + "</td>"
                    }

                    if (thisL2 > 0.7) {
                        FTableHTMLRow4 = FTableHTMLRow4 + "<td id = 'tdEven'>" + "High" + "</td>"
                    } else if (thisL2 > 0.4) {
                        FTableHTMLRow4 = FTableHTMLRow4 + "<td id = 'tdEven'>" + "Medium" + "</td>"
                    } else {
                        FTableHTMLRow4 = FTableHTMLRow4 + "<td id = 'tdEven'>" + "Low" + "</td>"
                    }

                    if (thisL3 > 0.7) {
                        FTableHTMLRow5 = FTableHTMLRow5 + "<td id = 'tdEven'>" + "Very Likely" + "</td>"
                    } else if (thisL3 > 0.4) {
                        FTableHTMLRow5 = FTableHTMLRow5 + "<td id = 'tdEven'>" + "Likely" + "</td>"
                    } else {
                        FTableHTMLRow5 = FTableHTMLRow5 + "<td id = 'tdEven'>" + "Possible" + "</td>"
                    }

                    if (thisRisk > 0.7) {
                        FTableHTMLRow6 = FTableHTMLRow6 + "<td id = 'tdEven'>" + "High" + "</td>";
                        thisRiskCatScore = 3;
                    } else if (thisRisk > 0.4) {
                        FTableHTMLRow6 = FTableHTMLRow6 + "<td id = 'tdEven'>" + "Medium" + "</td>"
                        thisRiskCatScore = 2;
                    } else {
                        FTableHTMLRow6 = FTableHTMLRow6 + "<td id = 'tdEven'>" + "Low" + "</td>"
                        thisRiskCatScore = 1;
                    }

                    FTableHTMLRow7 = FTableHTMLRow7 + "<td id = 'tdEven'>" + thisCostCat + "</td>"
                    FTableHTMLRow8 = FTableHTMLRow8 + "<td id = 'tdEven'>" + thisCostNote + "</td>"

                    thisFTScore = thisRiskCatScore * thisCostCatScore;

                    if (thisFTScore < BestFoundationTypeScore) {
                        BestFoundationTypeScore = thisFTScore;
                        BestFoundationType = thisFoundType;
                    }

                }

                FTableHTMLRow1 = FTableHTMLRow1 + "</tr>";
                FTableHTMLRow2 = FTableHTMLRow2 + "</tr>";
                FTableHTMLRow3 = FTableHTMLRow3 + "</tr>";
                FTableHTMLRow4 = FTableHTMLRow4 + "</tr>";
                FTableHTMLRow5 = FTableHTMLRow5 + "</tr>";
                FTableHTMLRow6 = FTableHTMLRow6 + "</tr>";
                FTableHTMLRow7 = FTableHTMLRow7 + "</tr>";
                FTableHTMLRow8 = FTableHTMLRow8 + "</tr>";

                var FTATableHTML = FTableHTMLRow1 + FTableHTMLRow2 +  FTableHTMLRow3 + FTableHTMLRow4 + FTableHTMLRow5 + FTableHTMLRow6 + FTableHTMLRow7 + FTableHTMLRow8;

                //create a table of the foundation options
                var FTATable = document.getElementById("FoundationTypeResultsTable");

                FTATable.innerHTML = FTATableHTML;

                //apply the foundation type decision tree
                var RecommendationText = "";
 
                if (thisSubsidence_3m > 6) {
                    if (thisStableDepth_3m != -1000000) {
                        RecommendationText = "The assessment shows that Over Excavation or End-Bearing Piles are the best options.  This is because subsidence is potentially high in the upper layer, but there are stables layers below about 10 feet.";
                    } else {
                        RecommendationText = "The assessment shows that Refrigeration is the best option.  This is because subsidence is potential high in the upper layer, and the soil is not stable at lower depths.";
                    }
                } else if (thisSubsidence_3m > 3) {
                    RecommendationText = "The assessment shows that Ad Freeze Piles are the best option.  This is because subsidence will likely be minimal to moderate in the upper layer.";
                } else {
                    RecommendationText = "The assessment shows that Slab on Grade is the best option.  This is because there will be little subsidence.";         
                }

                document.getElementById("FoundationTypeAssessmentConclusions").innerHTML = "<h3>Recommendations</h3><br>" + RecommendationText;
      

                

        }


    </script>


